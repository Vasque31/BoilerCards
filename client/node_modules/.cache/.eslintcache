[{"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\index.js":"1","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\reportWebVitals.js":"2","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\App.js":"3","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\RegistrationPage.js":"4","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\SavedIcon.js":"5","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Settings.js":"6","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\HomePage.js":"7","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\signInPage.js":"8","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\ViewFlashcard.js":"9","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Header.js":"10","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\EditFlashcard.js":"11","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\CreateFolder.js":"12","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\ChangeCredentials.js":"13","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\MyLibrary.js":"14","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\CreateFlashCard.js":"15","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Folder.js":"16","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Achievements.js":"17","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\HomeClasses.js":"18","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\HomeLibrary.js":"19","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Deletepopup.js":"20","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\DownloadFlashcard.js":"21","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\QuizGame.js":"22","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\ImageNote.js":"23","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Search.js":"24","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\TypedQuiz.js":"25","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\QuizSelect.js":"26"},{"size":820,"mtime":1666578725592,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1666578725593,"results":"29","hashOfConfig":"28"},{"size":2436,"mtime":1668715761137,"results":"30","hashOfConfig":"28"},{"size":3508,"mtime":1668661291564,"results":"31","hashOfConfig":"28"},{"size":1417,"mtime":1667340564423,"results":"32","hashOfConfig":"28"},{"size":1751,"mtime":1668661291566,"results":"33","hashOfConfig":"28"},{"size":624,"mtime":1667340564421,"results":"34","hashOfConfig":"28"},{"size":6988,"mtime":1669003376273,"results":"35","hashOfConfig":"28"},{"size":24727,"mtime":1668723674092,"results":"36","hashOfConfig":"28"},{"size":20544,"mtime":1668715761138,"results":"37","hashOfConfig":"28"},{"size":2193,"mtime":1666578725575,"results":"38","hashOfConfig":"28"},{"size":2061,"mtime":1666915967014,"results":"39","hashOfConfig":"28"},{"size":4624,"mtime":1667443151998,"results":"40","hashOfConfig":"28"},{"size":2267,"mtime":1667526325035,"results":"41","hashOfConfig":"28"},{"size":3913,"mtime":1667187609924,"results":"42","hashOfConfig":"28"},{"size":29270,"mtime":1668707379628,"results":"43","hashOfConfig":"28"},{"size":506,"mtime":1666578725573,"results":"44","hashOfConfig":"28"},{"size":516,"mtime":1666578725577,"results":"45","hashOfConfig":"28"},{"size":2725,"mtime":1667526325033,"results":"46","hashOfConfig":"28"},{"size":4720,"mtime":1667187609926,"results":"47","hashOfConfig":"28"},{"size":1123,"mtime":1667533829640,"results":"48","hashOfConfig":"28"},{"size":11697,"mtime":1668715761139,"results":"49","hashOfConfig":"28"},{"size":372,"mtime":1667583059327,"results":"50","hashOfConfig":"28"},{"size":1341,"mtime":1668661291565,"results":"51","hashOfConfig":"28"},{"size":8281,"mtime":1668715761139,"results":"52","hashOfConfig":"28"},{"size":1022,"mtime":1668715761139,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"1vk9hi7",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"58"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"58"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"58"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"58"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"58"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"58"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"58"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"58"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"58"},"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\index.js",["154","155"],[],"\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport RegistrationPage from \"./Components/RegistrationPage\";\r\nimport SavedIcon from \"./Components/SavedIcon\";\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n//ReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n\t    <App/>\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n  //document.getElementById(\"root\");\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",[],"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\App.js",["156","157","158","159"],[],"import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useState } from \"react\";\r\nimport SignInPage from \"./Components/signInPage.js\";\r\nimport HomePage from \"./Components/HomePage.js\";\r\nimport Header from './Components/Header.js';\r\nimport Settings from \"./Components/Settings.js\";\r\nimport CreateFlashCard from './Components/CreateFlashCard';\r\nimport RegistrationPage from './Components/RegistrationPage';\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport CreateFolder from './Components/CreateFolder';\r\nimport MyLibrary from './Components/MyLibrary';\r\nimport SavedIcon from './Components/SavedIcon';\r\nimport ChangeCredentials from './Components/ChangeCredentials';\r\nimport Folder from './Components/Folder';\r\nimport ViewFlashCard from './Components/ViewFlashcard.js'\r\nimport EditFlashcard from './Components/EditFlashcard';\r\nimport DownloadFlashcard from \"./Components/DownloadFlashcard\";\r\nimport { useCookies } from 'react-cookie';\r\nimport QuizGame from './Components/QuizGame.js';\r\nimport ImageNote from './Components/ImageNote.js';\r\nimport Search from './Components/Search';\r\nimport QuizSelect from './Components/QuizSelect.js';\r\nimport TypedQuiz from './Components/TypedQuiz.js';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div  className=\"App\">\r\n      <Routes>\r\n        <Route path=\"/\" element={<SignInPage/>} />\r\n        <Route path=\"/search\" element={<Search/>} />\r\n        <Route path=\"/register\" element={<RegistrationPage/>} />\r\n        <Route path=\"/HomePage\" element={<HomePage/>} /> {/*path=\"/HomePage/:id\"*/}\r\n        <Route path=\"/mylibrary\" element={<MyLibrary/>} />\r\n        <Route path=\"/settings\" element={<Settings/>} />\r\n        <Route path=\"/folder\" element={<Folder/>} />\r\n        <Route path=\"/createflashcardset\" element={<CreateFlashCard/>}/>\r\n        <Route path=\"/changecredentials\" element={<ChangeCredentials/>} />\r\n        <Route path=\"/flashcard\" element={<ViewFlashCard/>} />\r\n        <Route path=\"/editflashcard\" element={<EditFlashcard/>} />\r\n        <Route path=\"/saveicon\" element={<SavedIcon/>} />\r\n        <Route path=\"/downloadset\" element={<DownloadFlashcard/>} />\r\n        <Route path=\"/note\" element={<ImageNote/>} />\r\n        <Route path=\"/quizgame\" element={<QuizGame/>} />\r\n        <Route path=\"/quizselection\" element={<QuizSelect/>}/>\r\n        <Route path=\"/typedquiz\" element={<TypedQuiz/>}/>\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\RegistrationPage.js",["160","161","162","163","164","165"],[],"import React, { useState } from \"react\";\r\n\r\nimport \"./signInPage.css\";\r\nimport mylogo from \"../images/PurdueTrain.png\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useRef } from \"react\";\r\nimport axios from \"axios\";\r\n//Use states for Sign In\r\n\r\nconst errors = {\r\n    uname: \"Invalid Username\",\r\n    pass: \"Invalid Password\"\r\n};\r\n function checkvalidusername(str) {\r\n    const usernameRegex = /^[a-zA-Z0-9]{4,15}$/;\r\n    if (usernameRegex.test(str)) {\r\n        return true;\r\n    } else {\r\n      console.log(\"wrong format of username\");\r\n      return false;\r\n    }\r\n  }\r\nfunction checkvalidpassword(str) {\r\n    const passwordRegex = /^[A-Za-z0-9#?!@$%^&*-]{6,25}$/;\r\n    if (passwordRegex.test(str)) {\r\n      console.log(\"nicepassword!: \" + str);\r\n      return true;\r\n    } else {\r\n      console.log(\"wrong format of password\");\r\n      return false;\r\n    }\r\n  }  \r\nfunction SignInPage() {\r\n    const [errorMessages, setErrorMessages] = useState({});\r\n    const [isSubmitted, setIsSubmitted] = useState(false);\r\n    const navigate = useNavigate();\r\n    const usernameRef = useRef();\r\n    const passwordRef = useRef();\r\n    const emailRef = useRef();\r\n    \r\n\r\n    const handleSignUp = (event) => {\r\n        //prevents page reload\r\n        event.preventDefault();\r\n        navigate(\"/register\");\r\n        //Call to backend to check validity\r\n\r\n    };\r\n    const handleCreateAccount = async (event) => {\r\n        //prevents page reload\r\n        event.preventDefault();\r\n\r\n        const registrationInfo = {\r\n            username: usernameRef.current.value,\r\n            password: passwordRef.current.value,\r\n            email: emailRef.current.value\r\n        }\r\n        if(checkvalidpassword(registrationInfo.password)&&checkvalidusername(registrationInfo.username) ){\r\n            console.log(registrationInfo);\r\n            let res = await axios.post(\"http://localhost:3001/createaccount\", {\r\n                registrationInfo: registrationInfo,\r\n                });\r\n            if(res.data===true){\r\n                navigate(\"/\");\r\n            }else{\r\n                alert(\"username already exist\");\r\n        }\r\n        }\r\n        else{\r\n            alert(\"wrong format\");\r\n        }\r\n        \r\n    };\r\n    return (\r\n        <div className = \"login-form\">\r\n            <form onSubmit = {handleCreateAccount}>\r\n                <img alt = \"Logo\" className = \"photo\" src= {mylogo}/>\r\n\t\t\t\t<h1 style={{textAlign: \"center\", color: \"gold\"}}>Create BoilerCards Account</h1>\r\n                <div className = \"input-container\">\r\n                    <label style = {{textAlign: \"left\"}}>Email</label>\r\n                    <input type=\"email\" name = \"email\" placeholder=\"Enter Email\" ref={emailRef} required />\r\n                </div>\r\n                <div className = \"input-container\">\r\n                    <label style={{textAlign: \"left\"}}>Username</label>\r\n                    <input type=\"text\" name=\"username\" placeholder=\"Enter Username\" ref={usernameRef} required />\r\n                </div>\r\n                <div className=\"input-container\">\r\n                    <label style={{textAlign: \"left\"}}>Password </label>\r\n                    <input type=\"password\" name=\"password\" placeholder=\"Enter Password\" ref={passwordRef} required />\r\n                </div>\r\n                \r\n                <div className=\"button-container\">\r\n                    <input type=\"Submit\" value=\"Create Account\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignInPage;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\SavedIcon.js",["166","167"],[],"import \"./SavedIcon.css\";\r\nimport saveicon from \"../images/saveicon.png\";\r\nimport React from \"react\";\r\nimport CloseButton from 'react-bootstrap/CloseButton';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction SavedIcon() {\r\n\tconst navigate = useNavigate();\r\n\tfunction closeIcon() {\r\n\t\tnavigate(\"/HomePage\");\r\n\t}\r\n\r\n\treturn (\r\n\t  <div className=\"saveicon\">\r\n\t\t<CloseButton variant= \"black\" onClick={() => navigate(-1)}/>\r\n\t\t<img className=\"photo\" src= {saveicon}/>\r\n\t\t<p className=\"caption-text\"> Saved </p>\r\n\t  </div>\t\r\n\t);\r\n} \r\n\r\n/*function closeIcon() {\r\n\tnavigate(\"/HomePage\");\r\n}*/\r\n\r\n\r\n/* Modal mockup\r\nimport saveicon from \"../images/saveicon.png\";\r\n\r\n\t\t\tconst [showSaved, setShowSaved] = useState(false);\r\n\r\n\t\t\tconst handleShowSaved = () => {\tsetShowSaved(true);\t}\r\n\t\t\tconst handleCloseSaved = () => { setShowSaved(false);}\r\n\t\t\t\r\n\t\t\t<Modal show={showSaved} onHide={() => handleCloseSaved()}>\r\n                <Modal.Header closeButton={() => handleCloseSaved()}>\r\n                    <Modal.Title> Successful Operation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                        <img className=\"photo\" src= {saveicon}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleCloseSaved()}> Acknowledge </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n*/\r\nexport default SavedIcon;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Settings.js",["168","169","170"],[],"import React, { useState } from \"react\";\r\nimport \"./Settings.css\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport CloseButton from 'react-bootstrap/CloseButton';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Settings() {\r\n    const navigate = useNavigate();\r\n    const [cookies, setCookie, removeCookie] = useCookies(['userid']);\r\n    const handleClick = () => {\r\n        removeCookie('userid');\r\n        removeCookie('folderid');\r\n        setCookie('remember', false, { path: '/'})\r\n        navigate(\"/\");\r\n    };\r\n    return (\r\n        <div>\r\n            <div className=\"settings\">\r\n                <div style={{textAlign: \"left\", fontSize: \" 1.5rem\"}}>\r\n                    <CloseButton variant= \"white\" onClick={() => navigate(-1)}/>\r\n                </div>\r\n                <header style={{fontSize: '3.5rem', color: 'gold'}}>BoilerCard Profile Settings</header>\r\n                <ListGroup>\r\n                    <ListGroup.Item>\r\n                        <Link to=\"/changecredentials\">\r\n                            <Button variant=\"Light\">\r\n                                    Change Credentials\r\n                                </Button>\r\n                        </Link>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item action>\r\n                        <Button variant=\"Light\" onClick={handleClick}>\r\n                            Logout\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\HomePage.js",["171","172","173","174"],[],"import React, { useState } from \"react\";\r\nimport Header from \"./Header.js\";\r\nimport Achievements from \"./Achievements.js\";\r\nimport HomeLibrary from \"./HomeLibrary.js\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport HomeClasses from './HomeClasses.js';\r\nimport Deletepopup from \"./Deletepopup.js\";\r\nimport { handleShowDelete } from \"./Deletepopup.js\";\r\nimport \"./HomePage.css\";\r\n\r\nfunction HomePage() {\r\n    return (\r\n        <div>\r\n        \r\n            <Header/>\r\n            <Achievements/>\r\n            <HomeClasses/>\r\n            <HomeLibrary/>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\signInPage.js",["175","176","177","178","179","180","181","182","183","184","185"],[],"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\ViewFlashcard.js",["186","187","188","189","190","191","192","193","194"],[],"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Header.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport \"./Header.css\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport { Link } from \"react-router-dom\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport cookie from 'react-cookie';\r\nimport {useCookies} from 'react-cookie';\r\nimport { getCookie } from 'react-use-cookie';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\"; \r\nimport {folder} from \"./HomeLibrary\";\r\nimport saveicon from \"../images/saveicon.png\";\r\n\r\nimport {libstorage} from \"./signInPage.js\";\r\n\r\nfunction Header() {\r\n    const [show, setShow] = useState(false);\r\n    const fileReader = new FileReader();\r\n    const [destFolder, setDestFolder] = useState(\"\");\r\n    const [showFolder, setShowFolder] = useState(false);\r\n    const [searchMethod, setSearchMethod] = useState(true);\r\n    const [inputList, setinputList] = useState([{front:'', back:'', drate:'3', img: ''}]);\r\n    const [folderName, setFoldername] = useState();\r\n    const [subject, setSubject] = useState();\r\n    const [statePrivate, setPrivate] = useState(true);\r\n    const [name, setName] = useState();\r\n    const navigate = useNavigate();\r\n    const fileRef = useRef();\r\n    const [label, setLabel] = useState('');\r\n    const [subjects, setSubjects] = useState([JSON.parse(localStorage.getItem('subjects'))])\r\n\r\n\r\n    const [library, setLibrary] = useState([]);\r\n    useEffect(()=> {\r\n        const getLibrary = async () => {\r\n            let res = await axios.post(\"http://localhost:3001/loadspace\", {\r\n                uid:getCookie('userid'),\r\n            });\r\n            console.log(res.data);\r\n            setLibrary(res.data);\r\n            localStorage.setItem('libdata', JSON.stringify(res.data));\r\n            res = await axios.get(\"http://localhost:3001/subjectarray\", {\r\n\r\n            });\r\n            localStorage.setItem('subjects', JSON.stringify(res.data));\r\n            setSubjects(JSON.parse(localStorage.getItem('subjects')));\r\n        }\r\n        getLibrary();\r\n    },[]);\r\n\r\n    \r\n    const [showSaved, setShowSaved] = useState(false);\r\n    \r\n    const handleShowSaved = () => {\tsetShowSaved(true);\t}\r\n    const handleCloseSaved = () => { \r\n        setShowSaved(false);\r\n        window.location.reload(false);\r\n    }\r\n    {/* Image Handlers */}\r\n    const handleimage = (e, i) => {\r\n        const {name} = e.target;\r\n        const list = [...inputList];\r\n        fileReader.onload = r => {\r\n            list[i][name]=r.target.result;\r\n        };\r\n        fileReader.readAsDataURL(e.target.files[0]);\r\n        setinputList(list);\r\n    }\r\n    const handleaddmore = () => {\r\n        setinputList([...inputList, {front:'', back:'', drate:'3', img: ''}]);\r\n    }\r\n    const handleinputchange = (e, index) => {\r\n        const {name, value,rate} = e.target;\r\n        const list = [...inputList];\r\n        list[index][name]=value;\r\n        setinputList(list);\r\n        console.log(inputList);\r\n    } \r\n    const handleSave = async(event) => {\r\n        if(destFolder!==''){\r\n            event.preventDefault();\r\n        const flashcardInfo = {\r\n            inputList:inputList,\r\n            name:name,\r\n            statePrivate:statePrivate,\r\n            folderid:destFolder,\r\n        }\r\n        console.log(flashcardInfo);\r\n        let res = await axios.post(\"http://localhost:3001/createflashcardset\", {\r\n            inputList:flashcardInfo.inputList,\r\n            name:flashcardInfo.name,\r\n            public:flashcardInfo.statePrivate,\r\n            folderid:flashcardInfo.folderid,\r\n        });\r\n\r\n        if(res.data===true){\r\n            handleShowSaved();\r\n        }\r\n        handleClose();\r\n        \r\n        console.log(flashcardInfo);\r\n        }   \r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setinputList([{front:'', back:'', drate:'3', img: ''}]);\r\n    }\r\n    const handleShow = async() => {\r\n        let res = await axios.post(\"http://localhost:3001/loadspace\", {\r\n            uid:getCookie('userid'),\r\n        });\r\n        setLibrary(res.data);\r\n        setShow(true);\r\n    }\r\n    const handleShowFolder = () => setShowFolder(true);\r\n    const handleCloseFolder = () => {\r\n        setShowFolder(false);\r\n \r\n    }\r\n    const handleSaveFolder = async(event) => {\r\n        let res = await axios.post(\"http://localhost:3001/createfolder\",{\r\n            folderName:folderName,\r\n            label:subject,\r\n            uid:getCookie('userid'),    \r\n        });\r\n\r\n\r\n        handleCloseFolder();\r\n        console.log(\"code beyond reload executes\");\r\n        if (res.data == true) {\r\n            handleShowSaved(); //save icon\r\n        }\r\n        res = await axios.post(\"http://localhost:3001/loadspace\", {\r\n                uid:getCookie('userid'),\r\n            });\r\n            console.log(res.data);\r\n            setLibrary(res.data);\r\n            localStorage.setItem('libdata', JSON.stringify(res.data));\r\n        \r\n    } \r\n    const onFileChange = () => {\r\n        \r\n    }\r\n    const [search, setSearch] = useState(\"\");\r\n    const handleSearch = async () => {\r\n        console.log(search);\r\n        let res = await axios.post(\"http://localhost:3001/searchkeywords\", {\r\n                keyword:search,\r\n        });\r\n        localStorage.setItem('searchResults', JSON.stringify(res.data));\r\n        console.log(res.data);\r\n        navigate('/search');\r\n        window.location.reload();\r\n    }\r\n\r\n    const handleSearchLabel = async () => {\r\n        let res = await axios.post(\"http://localhost:3001/searchsubject\", {\r\n                subject:label,\r\n        });\r\n        localStorage.setItem('searchResults', JSON.stringify(res.data));\r\n        console.log(res.data);\r\n        navigate('/search');\r\n        window.location.reload();\r\n    }\r\n    return (\r\n        <div className=\"app\">\r\n            <Navbar variant=\"dark\" expand=\"lg\">\r\n                <Container>\r\n                    <Navbar.Brand>BoilerCards</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"me-auto\">\r\n                        <Nav.Link>\r\n                            <Link to=\"/HomePage\">\r\n                                <Button variant=\"Light\">\r\n                                    Home\r\n                                </Button>\r\n                            </Link>\r\n                        </Nav.Link>\r\n                        {searchMethod && <div style={{paddingTop: '1rem', paddingRight: '0.5rem'}}>\r\n                        <Form>\r\n                        <Form.Check \r\n                            type=\"switch\"\r\n                            id=\"custom-switch\"\r\n                            label=\"Search By Keyword\"\r\n                            onClick={() => setSearchMethod(false)}\r\n                        />\r\n                        </Form>\r\n                        </div>}\r\n                        {!searchMethod && <div style={{paddingTop: '1rem', paddingRight: '0.5rem'}}>\r\n                        <Form>\r\n                        <Form.Check \r\n                            type=\"switch\"\r\n                            id=\"custom-switch\"\r\n                            label=\"Search By Label\"\r\n                            onClick={() => setSearchMethod(true)}\r\n                            defaultChecked\r\n                        />\r\n                        </Form>\r\n                        </div>}\r\n\r\n                        {!searchMethod && <div style={{paddingTop: '1rem', paddingRight: '0.5rem'}}>\r\n                            <select name=\"LabelSelectList\" id=\"LabelList\" onChange={(e) => setLabel(e.currentTarget.value)}>\r\n                            <option value=\"\">---Choose---</option>\r\n                                {subjects.map(item => {\r\n                                    return (\r\n                                        <option value={item}>{item}</option>    \r\n                                    );\r\n                                })}\r\n                            </select>\r\n                            <Button variant=\"dark\" onClick={handleSearchLabel}>Search</Button>\r\n                        </div>}\r\n\r\n                        {searchMethod && <Form className=\"d-flex\">\r\n                            <Form.Control\r\n                                type=\"search\"\r\n                                placeholder=\"Search\"\r\n                                id='search'\r\n                                className=\"me-2\"\r\n                                aria-label=\"Search\"\r\n                                onChange={(e) => setSearch(e.target.value)}\r\n                            />\r\n                            <Button variant=\"dark\" onClick={handleSearch}>Search</Button>\r\n                        </Form>}\r\n                        <NavDropdown title=\"Create\" id=\"basic-nav-dropdown\" style={{paddingTop: '0.45rem'}}>\r\n                            <NavDropdown.Item href=\"#action/3.1\">\r\n                                Class\r\n                            </NavDropdown.Item>\r\n                            <NavDropdown.Item>\r\n                                <Button variant=\"Light\" onClick={handleShowFolder}>\r\n                                    Folder\r\n                                </Button>\r\n                                <div>\r\n                                <Modal show={showFolder} onHide={handleCloseFolder} backdrop=\"static\" dialogClassName=\"general-box-createfolder\">\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title>\r\n                                            <h1 style ={{fontSize: \"3rem\", color:\"gold\", textAlign:\"center\"}}>BOILERCARDS</h1>\r\n                                            <h2 style ={{fontSize: \"1rem\", color:\"gold\", textAlign:\"center\"}}>Create Folder</h2>\r\n                                        </Modal.Title>\r\n                                        \r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                            <label style = {{paddingRight: \"1rem\", color: \"gold\", fontSize: \"1rem\"}}>Name of New Folder: </label>\r\n                                            <input type=\"text\" name = \"folderName\" onChange={(e) => setFoldername(e.target.value)} required />\r\n                                            <label style = {{paddingRight: \"1rem\", color: \"gold\", fontSize: \"1rem\"}}>Folder Subject: </label>\r\n                                            <input type=\"text\" name = \"subject\" onChange={(e) => setSubject(e.target.value)} required />\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer>\r\n                                            <Button variant=\"secondary\" onClick={handleCloseFolder}>\r\n                                                Close\r\n                                            </Button>\r\n                                            <Button variant=\"primary\" onClick={handleSaveFolder}>\r\n                                                Save New Folder\r\n                                            </Button>\r\n                                    </Modal.Footer>\r\n                                </Modal>\r\n                                </div>\r\n                            </NavDropdown.Item>\r\n                            \r\n                             {/* Create FlashcardSet DropDown Option */}\r\n\r\n                            <NavDropdown.Item>\r\n                                    <Button variant=\"Light\" onClick={handleShow}>\r\n                                        Flashcard Set\r\n                                    </Button>\r\n                                     {/* Create FlashcardSet Modal */}\r\n                                    <div onKeyDown={e => e.stopPropagation()}\r\n                                        onClick={e => e.stopPropagation()}\r\n                                        onFocus={e => e.stopPropagation()}\r\n                                        onMouseOver={e => e.stopPropagation()} >\r\n                                    <Modal show={show} onHide={handleClose} dialogClassName=\"general-box-createflash\">\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>\r\n                                            <h1 style ={{fontSize: \"5rem\", color:\"gold\", textAlign: \"center\", background: \"black\"}}>BOILERCARDS</h1>\r\n                                            <h2 style ={{fontSize: \"2rem\", color:\"gold\", textAlign: \"center\", background: \"black\"}}>Create Flashcard Set</h2>\r\n                                            </Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>\r\n                                            <label style={{background: \"black\", color: 'gold'}}>Destination Folder</label>&nbsp; &nbsp;\r\n                                            <select name=\"selectList\" id=\"selectList\" onChange={(e) => setDestFolder(e.currentTarget.value)}>\r\n                                                <option value=\"\">---Choose---</option>\r\n                                                {Object.values(library).map(item => {\r\n                                                    return (\r\n                                                        <option value={item._id}>{item.foldername}</option>    \r\n                                                    );\r\n                                                })}\r\n                                            </select>\r\n                                            <h1></h1>\r\n                                            <label style = {{paddingRight: \"1rem\", color: \"gold\",background: \"black\", fontSize: \"1rem\"}}>Name Of FlashCard Set</label>\r\n                                            <input type=\"text\" name=\"flashcardSetName\" onChange={(e) => setName(e.target.value)} required />\r\n                                            <h1></h1>\r\n                                                <label style={{background: \"black\", color: 'gold'}}>Private/Public</label>\r\n                                                <select name=\"pripub\" id=\"privlist\" onChange={(e) => setPrivate(e.currentTarget.value)}>\r\n                                                    <option value={true}>\r\n                                                        Private\r\n                                                    </option>\r\n                                                    <option value={false}>\r\n                                                        Public\r\n                                                    </option>\r\n                                                </select>\r\n                                            {\r\n                                            inputList.map((x,i) => { \r\n                                                return(\r\n                                                <Form>\r\n                                                    <Form.Group style={{color: \"gold\"}}>\r\n                                                        <h1 style={{background: \"black\", color: 'gold'}}>#{i+1}</h1>\r\n                                                        <Form.Label style={{background: \"black\", color: 'gold'}}>Front of Card</Form.Label>\r\n                                                        <div>\r\n                                                        <textarea type=\"text\" name= \"front\" placeholder=\"Front of FlashCard\" onChange={e => handleinputchange(e,i)}/>\r\n                                                        </div>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group style={{color: \"gold\"}}>\r\n                                                        <Form.Label style={{background: \"black\", color: 'gold'}}>Back of Card</Form.Label>\r\n                                                        <div>\r\n                                                        <textarea type=\"text\" name= \"back\" placeholder=\"Back of FlashCard\" onChange={e => handleinputchange(e,i)} />\r\n                                                        </div>\r\n                                                    </Form.Group>\r\n                                                    <input type='file' name='img' accept=\"image/png\" onChange={(e) => handleimage(e,i)}/>\r\n                                                    <Form.Group style={{color: \"gold\"}}>\r\n                                                        <Form.Label style={{background: \"black\", color: 'gold'}}>Difficulty Rating</Form.Label>\r\n                                                        <select name =\"drate\" id=\"Difficulty-Rating\" onChange={(e) => handleinputchange(e,i)}>\r\n                                                            <option value={1}>1</option>\r\n                                                            <option value={2}>2</option>\r\n                                                            <option selected value={3}>3</option>\r\n                                                            <option value={4}>4</option>\r\n                                                            <option value={5}>5</option>\r\n                                                        </select>\r\n                                                    </Form.Group>\r\n                                                </Form>\r\n                                                );\r\n                                            })}\r\n                                            <div style={{paddingTop: \"1rem\"}}>\r\n                                                <Button varient= \"primary\" type=\"button\" onClick={handleaddmore}>\r\n                                                    Add FlashCard\r\n                                                </Button>\r\n                                            </div>\r\n                                        </Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                Close\r\n                                            </Button>\r\n                                            <Button variant=\"primary\" onClick={handleSave}>\r\n                                                Save Changes\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n                                    </div>\r\n                            </NavDropdown.Item> \r\n                        </NavDropdown>\r\n\r\n                         {/* Profile DropDown */}\r\n                        \r\n                        <NavDropdown title=\"Profile\" id=\"basic-nav-dropdown\" style={{paddingTop: '0.45rem'}}>\r\n                            <NavDropdown.Item href=\"#action/3.1\">\r\n                                Account Data\r\n                            </NavDropdown.Item>\r\n                            <NavDropdown.Item>\r\n                                <Link to=\"/settings\">\r\n                                    <Button variant=\"Light\">\r\n                                        Settings\r\n                                    </Button>\r\n                                </Link>\r\n                            </NavDropdown.Item> \r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    </Navbar.Collapse>  \r\n                </Container>\r\n            </Navbar>\r\n\r\n             {/* Save Modal */}\r\n            \r\n            <Modal show={showSaved}>\r\n                <Modal.Header closeButton onClick={() => handleCloseSaved()}>\r\n                    <Modal.Title> Successful Operation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                        <img className=\"photo\" src= {saveicon}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleCloseSaved()}> Acknowledge </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\EditFlashcard.js",[],[],"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\CreateFolder.js",["211","212","213","214"],[],"import React, { useState } from \"react\";\r\nimport \"./CreateFlashCard.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport CloseButton from 'react-bootstrap/CloseButton';\r\nimport axios from \"axios\";\r\nimport { useCookies } from 'react-cookie';\r\nimport { getCookie } from 'react-use-cookie';\r\nfunction CreateFolder() {\r\n    const [folderName, setFoldername] = useState();\r\n    const [cookie, setCookie, removeCookie] = useCookies(['userid']);\r\n    const navigate = useNavigate();\r\n    const handleSave = async (event) => {\r\n        event.preventDefault();\r\n        const currentuser = getCookie('userid');\r\n        console.log(getCookie('userid'));\r\n        let res = await axios.post(\"http://localhost:3001/createfolder\", {\r\n            folderName:folderName, \r\n            uid:currentuser,      \r\n        });\r\n\r\n        if(res){\r\n            alert(\"success\");\r\n            \r\n            let res = await axios.post(\"http://localhost:3001/loadspace\", {\r\n                uid:currentuser,\r\n            });\r\n\r\n        }\r\n        console.log(folderName);\r\n        \r\n    }\r\n    return (\r\n        <div className=\"general-box-create\">\r\n            <div style={{textAlign: \"left\", fontSize: \" 1.5rem\"}}>\r\n                    <CloseButton variant= \"white\" onClick={() => navigate(-1)}/>\r\n            </div>\r\n            <header style = {{fontSize: \"2rem\", color:\"gold\", textAlign: \"center\"}}>Create Folder</header>\r\n            <label style = {{paddingRight: \"1rem\", color: \"gold\", fontSize: \"1rem\"}}>Name of Folder</label>\r\n            <input type=\"text\" name=\"folderName\" onChange={e => setFoldername(e.target.value)} required />\r\n            <Form>\r\n                <Form.Group style={{paddingTop: \"1rem\"}}>\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={handleSave}>\r\n                        Save New Folder\r\n                    </Button>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateFolder;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\ChangeCredentials.js",["215","216"],[],"import React, { useRef, useState } from \"react\";\r\nimport \"./CreateFlashCard.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport CloseButton from 'react-bootstrap/CloseButton';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport saveicon from \"../images/saveicon.png\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nfunction checkvalidusername(str) {\r\n    const usernameRegex = /^[a-zA-Z0-9]{4,15}$/;\r\n    if (usernameRegex.test(str)) {\r\n        return true;\r\n    } else {\r\n      console.log(\"wrong format of username\");\r\n      return false;\r\n    }\r\n  }\r\nfunction checkvalidpassword(str) {\r\n    const passwordRegex = /^[A-Za-z0-9#?!@$%^&*-]{6,25}$/;\r\n    if (passwordRegex.test(str)) {\r\n      console.log(\"nicepassword!: \" + str);\r\n      return true;\r\n    } else {\r\n      console.log(\"wrong format of password\");\r\n      return false;\r\n    }\r\n  }  \r\nfunction ChangeCredentials() {\r\n    const [oldusername, setOldUsername] = useState();\r\n    const [newusername, setNewUsername] = useState();\r\n    const [oldpassword, setOldPassword] = useState();\r\n    const [newpassword, setNewPassword] = useState();\r\n    const [showSaved, setShowSaved] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const handleShowSaved = () => {\tsetShowSaved(true);\t}\r\n    const handleCloseSaved = () => { setShowSaved(false);}    \r\n    const handleSave = async (event) => {\r\n        event.preventDefault();\r\n        const newAccountInfo = {\r\n            oldusername:oldusername,\r\n            newusername:newusername,\r\n            oldpassword:oldpassword,\r\n            newpassword:newpassword\r\n        }\r\n        console.log(newAccountInfo);\r\n        if(checkvalidpassword(newpassword)&&checkvalidusername(newusername)){\r\n            let res = await axios.post(\"http://localhost:3001/changecredential\", {\r\n            oldusername:oldusername,\r\n            newusername:newusername,\r\n            oldpassword:oldpassword,\r\n            newpassword:newpassword\r\n            \r\n            });\r\n            if(res.data ===true){\r\n                window.location.reload();\r\n                handleShowSaved();\r\n            }else{\r\n                alert(\"password does not match\")\r\n            }\r\n        console.log(newAccountInfo);\r\n        }else{\r\n            alert(\"wrong format\");\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"general-box-create\">\r\n            <div style={{textAlign: \"left\", fontSize: \" 1.5rem\"}}>\r\n                    <CloseButton variant= \"white\" onClick={() => navigate(-1)}/>\r\n            </div>\r\n            <Form>\r\n                <Form.Group style={{color: \"gold\"}}>\r\n                    <Form.Label>Old Username</Form.Label>\r\n                    <Form.Control type=\"text\" name= \"oldusername\" placeholder=\"oldusername\" onChange={e => setOldUsername(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group style={{color: \"gold\"}}>\r\n                    <Form.Label>Old Password</Form.Label>\r\n                    <Form.Control type=\"text\" name= \"oldpassword\" placeholder=\"oldpassword\" onChange={e => setOldPassword(e.target.value)} />\r\n                </Form.Group>\r\n                <Form.Group style={{color: \"gold\"}}>\r\n                    <Form.Label>New Username</Form.Label>\r\n                    <Form.Control type=\"text\" name= \"newusername\" placeholder=\"newusername\" onChange={e => setNewUsername(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group style={{color: \"gold\"}}>\r\n                    <Form.Label>New Password</Form.Label>\r\n                    <Form.Control type=\"text\" name= \"newpassword\" placeholder=\"newpassword\" onChange={e => setNewPassword(e.target.value)} />\r\n                </Form.Group>\r\n            </Form>\r\n\r\n            <div style={{paddingTop: \"1rem\"}}>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={handleSave}>\r\n                    Update Credentials\r\n                </Button>\r\n            </div>\r\n            <Modal show={showSaved} onHide={() => handleCloseSaved()}>\r\n                <Modal.Header closeButton={() => handleCloseSaved()}>\r\n                    <Modal.Title> Successful Operation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                        <img className=\"photo\" src= {saveicon}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleCloseSaved()}> Acknowledge </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChangeCredentials;\r\n","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\MyLibrary.js",["217","218","219","220","221","222","223"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"./HomeLibrary.css\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport CloseButton from \"react-bootstrap/esm/CloseButton\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport { libstorage } from \"./signInPage\";\r\nimport { useCookies } from 'react-cookie';\r\nimport { getCookie } from 'react-use-cookie';\r\nimport cookie from 'react-cookies'\r\nimport axios from \"axios\";\r\n\r\nfunction MyLibrary() {\r\n    const navigate = useNavigate();\r\n    const [library, setLibrary] = useState(JSON.parse(localStorage.getItem('libdata')));\r\n    const [cookie, setCookie, removeCookie] = useCookies([]);\r\n    \r\n    const handleSeeMore = (event) => {\r\n        //prevents page reload\r\n        event.preventDefault();\r\n        navigate(\"/mylibrary\");\r\n        \r\n    };\r\n    const handleFolderClick = async (id) => {\r\n        //prevents page reload\r\n        setCookie('folderid', id, { path: '/' });\r\n        let res = await axios.post(\"http://localhost:3001/folder\", {\r\n            folderid:getCookie('folderid')\r\n        });\r\n        console.log(res.data);\r\n        localStorage.setItem('folder', JSON.stringify(res.data));\r\n        navigate('/folder');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <div style={{paddingTop: \"1rem\", paddingLeft: \"9rem\", fontSize: \" 2rem\"}}>\r\n                <CloseButton variant= \"white\" onClick={() => navigate(-1)}/>\r\n            </div>\r\n        <div className=\"box\">\r\n        <heading className=\"section-title\">My Library</heading>\r\n        <div className= \"library-box\">\r\n            <table>\r\n            {Object.values(library).map(item => {\r\n                return (\r\n                    <row>\r\n                        &nbsp; &nbsp;\r\n                        {/*<h1>{item._id}</h1>*/}\r\n                        <Button variant='warning' className= \"library-buttons\" value={item._id} onClick= {(e) => handleFolderClick(e.target.value)}>\r\n                            {item.foldername}\r\n                        </Button>\r\n                        &nbsp; &nbsp;\r\n                    </row>\r\n                );\r\n            })}\r\n            </table>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default MyLibrary;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\CreateFlashCard.js",[],[],"C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Folder.js",["224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"./HomeLibrary.css\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport CloseButton from \"react-bootstrap/esm/CloseButton\";\r\nimport { UNSAFE_enhanceManualRouteObjects, useNavigate } from 'react-router-dom';\r\nimport Header from \"./Header\";\r\nimport axios from 'axios';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ButtonGroup from \"react-bootstrap/esm/ButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport { useCookies } from 'react-cookie';\r\nimport { getCookie } from 'react-use-cookie';\r\nimport saveicon from \"../images/saveicon.png\";\r\nimport cookie from 'react-cookies'\r\nexport var flashcards = null;\r\n\r\n//var to update modal display, initialized with dummy values to prevent null crash\r\nvar selectedFlashcardsetToDelete = {\r\n    setname: \"defaultname set\",\r\n};\r\nvar selectedFlashcardsetToCopy = {\r\n    setname: \"defaultname set\",\r\n}; \r\nvar currentUser = {\r\n    folder: new Map(), \r\n};\r\nfunction Folder() {\r\n    const navigate = useNavigate();\r\n    const fileReader = new FileReader();\r\n    const [show, setShow] = useState(false);\r\n    const [statePrivate, setPrivate] = useState(true);\r\n    const [TMPName, setTMPName] = useState(\"\");\r\n    const [showSetting, setShowSetting] = useState(false);\r\n    const [cookie, setCookie] = useCookies([]);\r\n    const [inputList, setinputList] = useState([{front:'', back:'', drate: '3', img:''}]);\r\n    const [name, setName] = useState();\r\n    const [folder, setFolder] = useState(JSON.parse(localStorage.getItem('folder')));\r\n    const [library, setLibrary] = useState(JSON.parse(localStorage.getItem('libdata')));\r\n    const [destFolder, setDestFolder] = useState(\"\");\r\n    const [showFolderDeleteConfirm, setShowFolderDeleteConfirm] = useState(false);\r\n    const [showFlashcardsetDeleteConfirm, setShowFlashcardsetDeleteConfirm] = useState(false);\r\n    const [showFlashcardsetCopy, setShowFlashcardsetCopy] = useState(false);\r\n    const [showFlashcardsetDeleteGroupConfirm, setShowFlashcardsetDeleteGroupConfirm] = useState(false);\r\n    const [showSaved, setShowSaved] = useState(false);\r\n    const [selectall, setSelectAll] = useState(false);\r\n    const [selected, setSelected] = useState([]);\r\n\r\n    const [copyDestFolderList, setCopyDestFolderList] = useState(new Map()); //map\r\n    const [copyDestFolderSelect, setCopyDestFolderSelect] = useState(\"\"); //id \r\n\r\n    const handleShowSaved = () => { setShowSaved(true);}\r\n    const handleCloseSaved = () => { \r\n        setShowSaved(false);\r\n        handlerefresh();\r\n    }\r\n    const handleCloseFlashsetDelCon = () => {setShowFlashcardsetDeleteConfirm(false);}\r\n    const handleCloseFolderDeleteConfirm = () => {setShowFolderDeleteConfirm(false);}\r\n    const handleShowFolderDeleteConfirm = () => {setShowFolderDeleteConfirm(true);}\r\n\r\n    const handleShowFlashcardsetGroupDeleteConfirm = () => {setShowFlashcardsetDeleteGroupConfirm(true);}\r\n    const handleCloseFlashcardsetGroupDeleteConfirmation = () => {setShowFlashcardsetDeleteGroupConfirm(false);}\r\n    const [checkedState, setCheckedState] = useState([])\r\n    const [setting, setSetting] = useState(false);\r\n    const [showChangeLabel, setShowChangeLabel] = useState(false);\r\n    const [newLabel, setNewLabel] = useState('');\r\n\r\n    const handleSettingClick = () => {\r\n        setSetting(!setting);\r\n        setSelectAll(false);\r\n    }\r\n    const handleCloseChangeLabel = () => {\r\n        setShowChangeLabel(false);\r\n        setNewLabel('');\r\n    }\r\n    const handleShowChangeLabel = () => {\r\n        setShowChangeLabel(true);\r\n    }\r\n    const handleSaveChangeLabel = async () => {\r\n        console.log(newLabel);\r\n        let res = await axios.post(\"http://localhost:3001/addLabel\", {\r\n            label:newLabel,\r\n            folderid: folder._id\r\n        });\r\n        handlerefresh();\r\n        handleCloseChangeLabel();\r\n    }\r\n\r\n    const handleAddGroup = (e, i) => {\r\n        console.log(e.currentTarget.value)\r\n        if (e.target.checked) {\r\n            console.log('✅ Checkbox is checked');\r\n\r\n            setSelected([...selected, {\r\n                setid: e.currentTarget.value,\r\n                id: i,\r\n            }]);\r\n        \r\n        } else {\r\n            console.log('⛔️ Checkbox is NOT checked');\r\n            console.log(e.currentTarget.value)\r\n            setSelected((current) =>\r\n            current.filter((set) => !(set.id === i))\r\n            )\r\n        }\r\n        console.log(selected);\r\n    };\r\n    const handleselectall = () => {\r\n        setSelectAll(!selectall)\r\n        setSelected([]);\r\n    }\r\n\r\n    const handleShowFlashcardsetDeleteConfirm = async (id) => {\r\n        let res = await axios.post(\"http://localhost:3001/flsahcardset\",{\r\n            setid:id,\r\n        });\r\n        selectedFlashcardsetToDelete = res.data;\r\n        console.log();\r\n        selectedFlashcardsetToDelete.setname = selectedFlashcardsetToDelete.flashcardset.setname;\r\n        setShowFlashcardsetDeleteConfirm(true);\r\n    }\r\n    const handleShowFlashcardsetCopy = async (id) =>{\r\n        let res = await axios.post(\"http://localhost:3001/loadspace\", {\r\n            uid:getCookie('userid'),\r\n        });\r\n        setCopyDestFolderList(res.data); //Map\r\n        let resSet = await axios.post(\"http://localhost:3001/flsahcardset\",{\r\n            setid:id,\r\n        });\r\n        selectedFlashcardsetToCopy = resSet.data; //not flashcardset object, but folderinfo object\r\n        selectedFlashcardsetToCopy.setname = selectedFlashcardsetToCopy.flashcardset.setname;\r\n        \r\n        setShowFlashcardsetCopy(true);\r\n    }\r\n\r\n    const handleCloseFlashcardsetCopy = () => {\r\n        setShowFlashcardsetCopy(false);\r\n    }\r\n    const handleCopyFlashcardset = async () => {\r\n        //creates set in other folder\r\n\r\n        //get flashcards\r\n        /*var inputList = [];\r\n        Object.values(selectedFlashcardsetToCopy.flashcardarray).map(item => { //pull each card from array create from set to copy\r\n            inputList.push({front: item.front, back: item.back, drate: item.drate, image: item.image}); //add flashcard to list\r\n        });\r\n        console.log(inputList);*/\r\n        //create in new folder\r\n        let res = await axios.post(\"http://localhost:3001/copy\", {\r\n            groups: selectedFlashcardsetToCopy.flashcardset._id,\r\n            dest: copyDestFolderSelect,\r\n        });\r\n\r\n        if (res.data == true) {\r\n            handleShowSaved();\r\n            handleCloseFlashcardsetCopy(); //close modal display\r\n        }\r\n\r\n    }\r\n\r\n\r\n    {/* Delete Handlers Folder/FlashcardSets */}\r\n\r\n    const handleDeleteFolder = async(object) => {\r\n        let res = await axios.post(\"http://localhost:3001/deletefolder\",{\r\n            folder:folder,\r\n        });\r\n        if (res.data == true) {\r\n            handleShowSaved();\r\n            navigate(\"/HomePage\"); //folder deleted, leave it\r\n        }\r\n        \r\n    }\r\n    const handlerefresh = async () => {     \r\n        console.log(folder._id);\r\n        let res = await axios.post(\"http://localhost:3001/folder\", {\r\n            folderid:folder._id\r\n        });\r\n        console.log(res.data);\r\n        setFolder(res.data);\r\n        localStorage.setItem('folder', JSON.stringify(res.data));\r\n    }\r\n    //passes in the set to be deleted\r\n    const handleDeleteFlashcardset = async (object) => {\r\n        const setinfo = object;\r\n        setinfo.setid = object._id;\r\n        let res = await axios.post(\"http://localhost:3001/deleteset\",{\r\n            setid: object._id,\r\n        });\r\n        if (res.data == true) {\r\n            handleCloseFlashsetDelCon(); //remove confirmation upon success\r\n            handleShowSaved();\r\n        }\r\n        handlerefresh();\r\n    }\r\n\r\n    {/* Click Flashcard Handler */}\r\n\r\n    const handleFlashcardClick = async (id) => {\r\n        //prevents page reload\r\n        console.log(id);\r\n        let res = await axios.post(\"http://localhost:3001/flsahcardset\", {\r\n            setid:id \r\n        });\r\n        flashcards = res.data;\r\n        localStorage.setItem('flashcards', JSON.stringify(res.data));\r\n        console.log(res.data);\r\n        console.log(flashcards);\r\n        navigate('/flashcard');\r\n    };\r\n\r\n    {/* Create Flashcard Modal Handlers */}\r\n\r\n    const handleaddmore = () => {\r\n        setinputList([...inputList, {front:'', back:'', drate:'3', img: ''}]);\r\n    }\r\n    const handleinputchange = (e, index) => {\r\n        const {name, value} = e.target;\r\n        const list = [...inputList];\r\n        list[index][name]=value;\r\n        setinputList(list);\r\n        console.log(inputList)\r\n    } \r\n\r\n    //Not on backend yet\r\n    const handleFolderNameChange = (e) => {\r\n        setTMPName(e.target.value); \r\n        console.log(TMPName);\r\n        handlerefresh();\r\n        /*let res = await axios.post(\"http://localhost:3001/renamefolder\", {\r\n            folderid: library._id,\r\n            newname: e.target.value,\r\n        }\r\n        );\r\n        if (res.data == true) {\r\n            handleShowSaved();\r\n        }\r\n        */\r\n\r\n\r\n    }\r\n\r\n    const handleCreateFlashCardSet = async(event) => {\r\n        event.preventDefault();\r\n\r\n        const flashcardInfo = {\r\n            inputList:inputList,\r\n            name:name,\r\n            statePrivate:statePrivate,\r\n            folderid:folder._id\r\n        }\r\n        console.log(flashcardInfo);\r\n        let res = await axios.post(\"http://localhost:3001/createflashcardset\", {\r\n            inputList:flashcardInfo.inputList,\r\n            name:flashcardInfo.name,\r\n            public:flashcardInfo.statePrivate,\r\n            folderid:flashcardInfo.folderid,\r\n        });\r\n\r\n        if(res.data===true){\r\n            handleShowSaved();\r\n        }\r\n        handleClose();\r\n        handlerefresh();\r\n        console.log(flashcardInfo);\r\n    }\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setinputList([{front:'', back:'', drate:'3', img:''}]);\r\n    }\r\n    const handleShow = () => setShow(true);\r\n\r\n    {/* Edit Folder Name Modal Handlers */}\r\n\r\n    const handleSave = async(event) => {\r\n        event.preventDefault();\r\n        console.log(folder);\r\n        folder.foldername = TMPName;\r\n    \r\n        let res = await axios.post(\"http://localhost:3001/editfolder\", {\r\n            folder:folder,\r\n        });\r\n        \r\n        if(res.data===true){\r\n            handleShowSaved();\r\n        }\r\n        handlerefresh();\r\n        handleCloseSetting();\r\n    }\r\n\r\n    const handleCloseSetting = () => {\r\n        setShowSetting(false);\r\n        setTMPName(\"\");\r\n    }\r\n    const handleShowSetting = () => setShowSetting(true);\r\n\r\n    {/* Group Handlers */}\r\n\r\n    const handleGroupCopy = async() => {\r\n        if (destFolder !== '') {\r\n            let res = await axios.post(\"http://localhost:3001/groupcopy\", {\r\n                groups:selected,\r\n                dest:destFolder,\r\n            });\r\n            handlerefresh();\r\n            handleselectall();\r\n            if (res.data == true) {\r\n                handleShowSaved();\r\n            }\r\n            }\r\n    \r\n    }\r\n\r\n    const handleGroupDelete = async() => {\r\n        let res = await axios.post(\"http://localhost:3001/groupdelete\", {\r\n            groups:selected,\r\n            folder:folder,\r\n        });\r\n        handlerefresh();\r\n        handleselectall();\r\n        handleCloseFlashcardsetGroupDeleteConfirmation();\r\n        if (res.data == true) {\r\n            handleShowSaved();\r\n        }\r\n    }\r\n\r\n    const handleGroupMove = async() => {\r\n        if (destFolder !== '') {\r\n        let res = await axios.post(\"http://localhost:3001/groupmove\", {\r\n            groups:selected,\r\n            dest: destFolder,\r\n            folder:folder,\r\n        });\r\n        handlerefresh();\r\n        handleselectall();\r\n        if (res.data == true) {\r\n            handleShowSaved();\r\n        }\r\n    }\r\n    }\r\n\r\n    {/* Image Handlers */}\r\n    const handleimage = (e, i) => {\r\n        const {name} = e.target;\r\n        const list = [...inputList];\r\n        fileReader.onload = r => {\r\n            list[i][name]=r.target.result;\r\n        };\r\n        fileReader.readAsDataURL(e.target.files[0]);\r\n        setinputList(list);\r\n    }\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <div style={{paddingTop: \"1rem\", paddingLeft: \"9rem\", fontSize: \" 2rem\"}}>\r\n                <CloseButton variant= \"white\" onClick={() => navigate(-1)}/>\r\n            </div>\r\n            \r\n            <div className=\"box\">\r\n\r\n                <heading className=\"section-title\">{folder.foldername}</heading>\r\n                <div></div>\r\n                <heading style={{color: \"white\"}}>Label: {folder.label}</heading>\r\n                {!setting && <div style ={{textAlign: \"right\", paddingBottom: \"0.5rem\"}}>\r\n                {!selectall &&\r\n                <>\r\n                    <Button variant=\"warning\" onClick={handleselectall}>\r\n                        Select\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button variant=\"warning\" onClick={handleShow}>\r\n                        Create Flashcard Set\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button variant='light' onClick={handleSettingClick}><div style={{color: 'black'}}>Settings</div></Button>\r\n                    </>\r\n                }\r\n                {selectall &&\r\n                <>\r\n                    <Button variant=\"warning\" onClick={handleselectall}>\r\n                        UnSelect\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button variant=\"warning\" onClick={handleGroupMove}>\r\n                        Move\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button variant=\"warning\" onClick={handleGroupCopy}>\r\n                        Copy\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <select name=\"selectList\" id=\"selectList\" onChange={(e) => setDestFolder(e.currentTarget.value)}>\r\n                        <option value=\"\">---Choose Destination---</option>\r\n                        {Object.values(library).map(item => {\r\n                            return (\r\n                                <option value={item._id}>{item.foldername}</option>    \r\n                            );\r\n                        })}\r\n                    </select>\r\n                    <Button variant='danger' value={library._id} onClick={handleShowFlashcardsetGroupDeleteConfirm}>Delete</Button>\r\n\r\n                    </>\r\n                }\r\n                </div>}\r\n                {setting && \r\n                    <div style ={{textAlign: \"right\", paddingBottom: \"0.5rem\"}}>\r\n                    <Button variant=\"warning\" onClick={handleShowSetting}>\r\n                        Rename Folder\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button variant=\"warning\" onClick={handleShowChangeLabel}>\r\n                        Change Label\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button variant='danger' value={folder._id} onClick={() => handleShowFolderDeleteConfirm()}>Delete Folder</Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button variant='light' onClick={handleSettingClick}><div style={{color: 'black'}}>Close Settings</div></Button>\r\n                    </div>}\r\n                <div className= \"library-box\">\r\n                <table>\r\n                    {Object.values(folder.flashcardset).map((item, i) => {\r\n                        \r\n                        return (\r\n                            <row>\r\n                                {/*<h1>{item._id}</h1>*/}\r\n                                &nbsp; &nbsp;\r\n                                {selectall && <input name=\"folderid\" value={item._id} onClick={(e) => handleAddGroup(e, i)} type=\"checkbox\" />}\r\n                                <Button variant='warning' className= \"library-buttons\" value={item._id} onClick={(e) => handleFlashcardClick(e.target.value)}>\r\n                                    {item.setname}\r\n                                </Button>\r\n                                &nbsp; &nbsp;\r\n                                {!selectall &&\r\n                                <Button variant='danger' size='sm' className= \"library-buttons\" value={item._id} onClick={(e) => handleShowFlashcardsetDeleteConfirm(e.target.value)}>\r\n                                    x\r\n                                </Button>}\r\n                                {!selectall &&\r\n                                <Button size='sm'className= \"library-buttons\" value={item._id} onClick={(e) => handleShowFlashcardsetCopy(e.target.value)}>\r\n                                    Copy\r\n                                </Button>\r\n                                }\r\n                                &nbsp; &nbsp;\r\n                            </row>\r\n                            \r\n                        );\r\n                    })}\r\n                </table>\r\n                </div>\r\n            </div>\r\n            <Modal show={show} onHide={handleClose} dialogClassName=\"general-box-createflash\">\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>\r\n                                            <h1 style ={{fontSize: \"5rem\", color:\"gold\", background: \"black\", textAlign: \"center\"}}>BOILERCARDS</h1>\r\n                                            <h2 style ={{fontSize: \"2rem\", color:\"gold\", background: \"black\", textAlign: \"center\"}}>Create Flashcard Set</h2>\r\n                                            </Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>\r\n                                            <h1></h1>\r\n                                            <label style = {{paddingRight: \"1rem\", color: \"gold\", background: 'black', fontSize: \"1rem\"}}>Name Of FlashCard Set</label>\r\n                                            <input type=\"text\" name=\"flashcardSetName\" onChange={(e) => setName(e.target.value)} required />\r\n                                            <h1></h1>\r\n                                                <label style={{background: \"black\", color: 'gold'}}>Private/Public</label>\r\n                                                <select name=\"pripub\" id=\"privlist\" onChange={(e) => setPrivate(e.currentTarget.value)}>\r\n                                                    <option value={true}>\r\n                                                        Private\r\n                                                    </option>\r\n                                                    <option value={false}>\r\n                                                        Public\r\n                                                    </option>\r\n                                                </select>\r\n                                            {\r\n                                            inputList.map((x,i) => { \r\n                                                return(\r\n                                                    <Form>\r\n                                                    <Form.Group style={{color: \"gold\"}}>\r\n                                                        <h1 style={{background: \"black\", color: 'gold'}}>#{i+1}</h1>\r\n                                                        <Form.Label style={{background: \"black\", color: 'gold'}}>Front of Card</Form.Label>\r\n                                                        <div>\r\n                                                        <textarea type=\"text\" name= \"front\" placeholder=\"Front of FlashCard\" onChange={e => handleinputchange(e,i)}/>\r\n                                                        </div>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group style={{color: \"gold\"}}>\r\n                                                        <Form.Label style={{background: \"black\", color: 'gold'}}>Back of Card</Form.Label>\r\n                                                        <div>\r\n                                                        <textarea type=\"text\" name= \"back\" placeholder=\"Back of FlashCard\" onChange={e => handleinputchange(e,i)} />\r\n                                                        </div>\r\n                                                    </Form.Group>\r\n                                                    <input type='file' name='img' accept=\"image/png\" onChange={(e) => handleimage(e,i)}/>\r\n                                                    <Form.Group style={{color: \"gold\"}}>\r\n                                                        <Form.Label style={{background: \"black\", color: 'gold'}}>Difficulty Rating</Form.Label>\r\n                                                        <select name =\"drate\" id=\"Difficulty-Rating\" onChange={(e) => handleinputchange(e,i)}>\r\n                                                            <option value={1}>1</option>\r\n                                                            <option value={2}>2</option>\r\n                                                            <option selected value={3}>3</option>\r\n                                                            <option value={4}>4</option>\r\n                                                            <option value={5}>5</option>\r\n                                                        </select>\r\n                                                    </Form.Group>\r\n                                                </Form>\r\n                                                );\r\n                                            })}\r\n                                            <div style={{paddingTop: \"1rem\"}}>\r\n                                                <Button varient= \"primary\" type=\"button\" onClick={handleaddmore}>\r\n                                                    Add FlashCard\r\n                                                </Button>\r\n                                            </div>\r\n                                        </Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                Close\r\n                                            </Button>\r\n                                            <Button variant=\"primary\" onClick={handleCreateFlashCardSet}>\r\n                                                Save Changes\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n            <Modal show={showSetting} onHide={handleCloseSetting} dialogClassName=\"general-box-createflash\">\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        <h1 style ={{fontSize: \"5rem\", color:\"gold\", textAlign: \"center\"}}>BOILERCARDS</h1>\r\n                        <h2 style ={{fontSize: \"2rem\", color:\"gold\", textAlign: \"center\"}}>Rename Folder</h2>\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group style={{color: \"gold\"}}>\r\n                            New Folder Name: <input onChange={e => handleFolderNameChange(e)}></input>\r\n                        </Form.Group>\r\n                    </Form>                    \r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleCloseSetting}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleSave}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal show={showFolderDeleteConfirm} onHide={() => handleCloseFolderDeleteConfirm()}>\r\n                <Modal.Header closeButton={() => handleCloseFolderDeleteConfirm()}>\r\n                    <Modal.Title>Delete Confirmation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> Are you sure you want to delete {folder.foldername}?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleDeleteFolder(folder)}> Delete </Button>\r\n                    <Button onClick={() => handleCloseFolderDeleteConfirm()}> Cancel </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal show={showChangeLabel} onHide={handleCloseChangeLabel} dialogClassName=\"general-box-createflash\">\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        <h1 style ={{fontSize: \"5rem\", color:\"gold\", textAlign: \"center\"}}>BOILERCARDS</h1>\r\n                        <h2 style ={{fontSize: \"2rem\", color:\"gold\", textAlign: \"center\"}}>Change Label</h2>\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        \r\n                        <Form.Group style={{color: \"gold\"}}>\r\n                            New Label: <input onChange={e => setNewLabel(e.currentTarget.value)}></input>\r\n                        </Form.Group>\r\n                    </Form>                    \r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleCloseChangeLabel}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleSaveChangeLabel}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal show={showFlashcardsetDeleteConfirm} onHide={() => handleCloseFlashsetDelCon()}>\r\n                <Modal.Header closeButton={() => handleCloseFlashsetDelCon()}>\r\n                    <Modal.Title>Delete Confirmation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> Are you sure you want to delete {selectedFlashcardsetToDelete.setname}?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleDeleteFlashcardset(selectedFlashcardsetToDelete.flashcardset)}> Delete </Button>\r\n                    <Button onClick={() => handleCloseFlashsetDelCon()}> Cancel </Button>\r\n                </Modal.Footer>\r\n            </Modal>    \r\n            <Modal show={showFlashcardsetDeleteGroupConfirm} onHide={() => handleCloseFlashcardsetGroupDeleteConfirmation()}>\r\n                <Modal.Header closeButton={() => handleCloseFlashcardsetGroupDeleteConfirmation()}>\r\n                    <Modal.Title>Delete Confirmation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> Are you sure you want to delete the selected items?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleGroupDelete()}> Delete </Button>\r\n                    <Button onClick={() => handleCloseFlashcardsetGroupDeleteConfirmation()}> Cancel </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal show={showFlashcardsetCopy} onHide={() => handleCloseFlashcardsetCopy()}>\r\n                <Modal.Header closeButton={() => handleCloseFlashcardsetCopy()}>\r\n                    <Modal.Title>Copy {selectedFlashcardsetToCopy.setname}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> Select where to copy {selectedFlashcardsetToCopy.setname}:\r\n                                <div>\r\n                                    <select name=\"selectList\" id=\"selectList\" onChange={(e) => setCopyDestFolderSelect(e.currentTarget.value)}>\r\n                                                <option value=\"\">---Choose---</option>\r\n                                                {Object.values(copyDestFolderList).map(item => {\r\n                                                    return (\r\n                                                        <option value={item._id}>{item.foldername}</option>    \r\n                                                    );\r\n                                                })}\r\n                                    </select>\r\n                                </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleCloseFlashcardsetCopy()}> Cancel </Button>\r\n                    <Button onClick={() => handleCopyFlashcardset()}> Copy </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal show={showSaved} onHide={() => handleCloseSaved()}>\r\n                <Modal.Header closeButton={() => handleCloseSaved()}>\r\n                    <Modal.Title> Successful Operation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                        <img className=\"photo\" src= {saveicon}/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleCloseSaved()}> Acknowledge </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Folder;\r\n","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Achievements.js",["252","253"],[],"import React, { useState } from \"react\";\r\nimport \"./Achievements.css\";\r\n\r\nfunction Achievements() {\r\n\r\n    return (\r\n        <div className=\"box-achievement\">\r\n            <h1 className=\"section-title\">Achievements</h1>\r\n            <div className= \"achievement-box\">\r\n                <button className= \"block-achievement\"><img className= \"img-achievement\" src= {require(\"../images/PurdueTrain.png\")} alt=\"my image\"/></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Achievements;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\HomeClasses.js",["254"],[],"import React, { useState } from \"react\";\r\nimport \"./HomeClasses.css\";\r\n\r\nfunction HomeClasses() {\r\n\r\n    return (\r\n        <div className=\"box-classes\">\r\n            <h1 className=\"section-title\">My Classes</h1>\r\n            <div className= \"home-boxes\">\r\n                \r\n                <button className= \"block-buttons\"><img className= \"img-class\" src= {require(\"../images/PurdueTrain.png\")} alt=\"folder\"/></button>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeClasses;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\HomeLibrary.js",["255","256","257","258"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"./HomeLibrary.css\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { useCookies } from 'react-cookie';\r\nimport { getCookie } from 'react-use-cookie';\r\nimport cookie from 'react-cookies'\r\nexport var folder;\r\nfunction HomeLibrary() {\r\n    const navigate = useNavigate();\r\n    const [cookie, setCookie, removeCookie] = useCookies([]);\r\n    const [library, setLibrary] = useState([]);\r\n    \r\n    useEffect(()=> {\r\n        const getLibrary = async () => {\r\n            let res = await axios.post(\"http://localhost:3001/loadspace\", {\r\n                uid:getCookie('userid'),\r\n            });\r\n            console.log(res.data);\r\n            setLibrary(res.data);\r\n            localStorage.setItem('libdata', JSON.stringify(res.data));\r\n        }\r\n        getLibrary();\r\n    },[]);\r\n\r\n    const handleSeeMore = (event) => {\r\n        //prevents page reload\r\n        console.log(\"It reaches\")\r\n        navigate('/mylibrary');\r\n    };\r\n     \r\n    const handleFolderClick = async (id) => {\r\n        //prevents page reload\r\n        setCookie('folderid', id, { path: '/' });\r\n        let res = await axios.post(\"http://localhost:3001/folder\", {\r\n            folderid:getCookie('folderid')\r\n        });\r\n        folder = res.data;\r\n        console.log(res.data);\r\n        localStorage.setItem('folder', JSON.stringify(res.data));\r\n        navigate('/folder');\r\n    };\r\n    {/*const listOfItems = {libstorage.map((item, index) =>\r\n    <button className= \"library-buttons\" key={index} onClick={handleFolderClick(item._id)}><img className= \"img-library\" src= {require(\"../images/PurdueTrain.png\")} alt=\"lib\"/></button>\r\n    )};*/}\r\n    return (\r\n        <div className=\"box\">\r\n        <h1 className=\"section-title\">My Library</h1>\r\n        <div style ={{paddingTop: \"0.5rem\"}}>\r\n            <Button variant=\"link\" size= \"sm\" className= \"see-more\" onClick={handleSeeMore}>See All</Button>\r\n        </div>\r\n        <div className= \"library-box\">\r\n            <table>\r\n            {Object.values(library).slice(0,8).map(item => {\r\n                return (\r\n                    <row>\r\n                        &nbsp; &nbsp;\r\n                        {/*<h1>{item._id}</h1>*/}\r\n                        <Button variant=\"warning\" className= \"library-buttons\" value={item._id} onClick={(e) => handleFolderClick(e.target.value)}>\r\n                            {item.foldername}\r\n                        </Button>\r\n                        &nbsp; &nbsp;\r\n                    </row>\r\n                );\r\n            })}\r\n            </table>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default HomeLibrary;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Deletepopup.js",["259","260","261","262","263","264","265","266","267","268","269","270","271"],[],"import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport axios from 'axios';\r\n\r\nvar dummy = {\r\n    foldername: \"blank folder\",\r\n    setname: \"none set\",\r\n    front: \"blah card\",\r\n};\r\nvar [deleteObject, setDeleteObject] = [dummy, (e)=>{deleteObject = e;}]; //my usestate for object\r\nvar [show, setShow] = [false, (e)=>{show = e;}]; // Modal not shown by default\r\n\r\nvar dummyObjects = new Array();\r\nvar dummyCard = {\r\n    _id : 0,\r\n    front: \"card\",\r\n    back: \"back\",\r\n\r\n};\r\n\r\nvar dummySet = {\r\n    _id: 1,\r\n    setname: \"set\",\r\n};\r\n\r\nvar dummyFolder = {\r\n    _id: 2,\r\n    foldername: \"folder\",\r\n};\r\ndummyObjects[dummyCard._id] = dummyCard;\r\ndummyObjects[dummySet._id] = dummySet;\r\ndummyFolder[dummyFolder._id] = dummyFolder;\r\n\r\n\r\nfunction substituteDatabaseExampleLookup(id, type) {\r\n    var obj = dummyObjects[id];\r\n    obj.type = type;\r\n    return obj;\r\n}\r\n\r\n//from tutorial on Modal\r\nfunction Deletepopup() {\r\nconst [showFolderDeleteConfirm, setShowFolderDeleteConfirm] = useState(false);\r\nconst [showFlashcardsetDeleteConfirm, setShowFlashcardsetDeleteConfirm] = useState(false);\r\nconst [showFlashcardDeleteConfirm, setShowFlashcardDeleteConfirm] = useState(false);\r\n\r\nconst handleCloseFlashsetDelCon = () => {setShowFlashcardsetDeleteConfirm(false);}\r\nconst handleCloseFolDelCon = () => {setShowFolderDeleteConfirm(false);}\r\nconst handleShowFolderDeleteConfirm = () => {setShowFolderDeleteConfirm(true);}\r\nconst handleShowFlashcardsetDeleteConfirm = () => {setShowFlashcardsetDeleteConfirm(true);}\r\nconst handleCloseFlashDelCon = () => {setShowFlashcardDeleteConfirm(false);}\r\nconst handleShowFlashcardDeleteConfirm = () => {setShowFlashcardDeleteConfirm(true);}\r\n\r\n\r\nfunction handleClose() { setShow(false);} //remove Modal \r\n\r\nasync function handleDelete()  {\r\n    console.log();\r\n    deleteByType(deleteObject); //may have problems due to global var\r\n    setShow(false); //close popup upon deletion\r\n}\r\n\r\nreturn(\r\n<div>\r\n\r\n<Modal show={show} onHide={() => handleClose()}>\r\n<Modal.Header closeButton={() => handleClose()}>\r\n    <Modal.Title>Delete Confirmation</Modal.Title>\r\n</Modal.Header>\r\n<Modal.Body> Are you sure you want to delete {getObjectName(deleteObject)}?</Modal.Body>\r\n<Modal.Footer>\r\n    <Button onClick={() => handleDelete()}> Delete </Button>\r\n    <Button onClick={() => handleClose()}> Cancel </Button>\r\n    </Modal.Footer>\r\n</Modal>\r\n\r\n</div>);\r\n}\r\n//invoked on button to show Modal\r\nexport const handleShowDelete = async (toDeleteID, type) => {\r\n    //get object\r\n    var object = substituteDatabaseExampleLookup(toDeleteID, type);\r\n    /* Database operation\r\n    if (type == \"flashcard\") {\r\n        let res =await axios.post(\"http://localhost:3001/flsahcard\",{\r\n            flashcardid:toDeleteID,\r\n        });\r\n        object = res.data;     \r\n    }\r\n    \r\n    if (type == \"flashcardset\") {\r\n        let res = await axios.post(\"http://localhost:3001/flsahcardset\",{\r\n            flashcardsetid:toDeleteID,\r\n        });\r\n        object = res.data;\r\n    }\r\n\r\n    if (type == \"folder\") {\r\n        let res = await axios.post(\"http://localhost:3001/folder\",{\r\n            folderid:toDeleteID,\r\n        });\r\n        object = res.data;\r\n    }\r\n    */\r\n \r\n\r\n    //update popup\r\n    object.type = type; //set type for other functions\r\n    setDeleteObject(object); //put object \r\n    setShow(true); //Modal pop-up shows\r\n};\r\n\r\n// Works for folder, flashcardset, flashcard\r\nexport function getObjectName(object) {\r\n\r\n\r\n    if (object.front != null) {\r\n        return object.front; // Assume flashcard front approximates a \"name\"\r\n    }\r\n    \r\n    if (object.setname != null) {\r\n        return object.setname;\r\n    } \r\n    \r\n    if (object.foldername != null) {\r\n        return object.foldername;\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n\r\n//deletes an element from Flashcard database of any type\r\n//add booleans for delete returns\r\nasync function deleteByType(object) {\r\n\r\n    //delete flashcard\r\n    if (object.front != null) {\r\n        const id = object._id;\r\n        await axios.post(\"http://localhost:3001/deletFlashcard\",{\r\n            flashcardid:id,\r\n        });\r\n        return;\r\n    }\r\n\r\n    //delete flashcardset\r\n    if (object.type == \"flashcardset\") {\r\n        const id = object._id;\r\n        await axios.post(\"http://localhost:3001/deletFlashcardset\",{\r\n            flashcardid:id,\r\n        });\r\n        return;\r\n    }\r\n\r\n    //delete folder\r\n    if (object.foldername == \"folder\") {\r\n        const id = object._id;\r\n        /*await axios.post(\"http://localhost:3001/deletFlashcard\",{\r\n            flashcardid:id,\r\n        }); add when service available*/\r\n        return;\r\n    }\r\n}\r\n\r\nexport default Deletepopup;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\DownloadFlashcard.js",["272","273"],[],"import React, { useState } from \"react\";\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button'\r\nfunction DownloadFlashcard() {\r\n    const [flashcards, setFlashcards] = useState(JSON.parse(localStorage.getItem('flashcards')));\r\n    return (\r\n        <div style={{backgroundColor: \"white\"}}>\r\n            <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Front</th>\r\n                            <th>Back</th>\r\n                        </tr>\r\n                        {Object.values(flashcards.flashcardarray).map((item, index) => {\r\n                            return (\r\n                                <tr>\r\n                                   \r\n                                    <th>{item.front}</th>\r\n                                    <th>{item.back}</th>\r\n                                    \r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </thead>\r\n\r\n                </Table>\r\n        </div>\r\n    );\r\n}\r\nexport default DownloadFlashcard;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\QuizGame.js",["274","275","276","277","278","279","280","281","282","283","284","285","286","287"],[],"import Button from 'react-bootstrap/Button';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { cardsQuiz } from \"./ViewFlashcard\";\r\nimport { useState } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport {CloseButton} from 'react';\r\n\r\nimport * as React from 'react';\r\nimport ReactStopwatch from 'react-stopwatch';\r\nimport \"./QuizGame.css\";\r\n\r\nvar flashcardarray;\r\nvar score = 0;\r\nvar previousCorrectPrompts = [];\r\nvar previousIncorrectPrompts = [];\r\n\r\nvar readyForNewQuestion = true;\r\nvar currPrompt = 0;\r\nvar currQuestion = [{Index: 0, Correct:true},{Index: 0, Correct:true},{Index: 0, Correct:true},{Index: 0, Correct:true}];\r\n\r\nvar timerToStart = true;\r\nvar timerToStop = false;\r\n\r\nvar globalTime = 0;\r\n//Assume new round onHide for now\r\n\r\nfunction QuizGame() {\r\n    console.log(\"Rendering Quiz Game\")\r\n    //flashcardarray = cardsQuiz;\r\n        /****************************************************\r\n         *      Const definitions: states                   *\r\n         *                                                  *\r\n         ****************************************************/    \r\n    const [correctness, setCorrectness] = useState(\"Correct\");\r\n    const navigate = useNavigate();\r\n    const [showContinueorExit, setShowContinueorExit] = useState(false);\r\n    const [showQuestionFeedback, setShowQuestionFeedback] = useState(false);\r\n    const [time, setTime] = useState(0);\r\n    var mode = \"All prompts once\";\r\n\r\n    React.useEffect(() => {\r\n        var clockInterval;\r\n        if (timerToStart) {\r\n            timerToStart = false;\r\n            clockInterval = setInterval(() => {\r\n                globalTime++;\r\n                setTime(globalTime);\r\n            }, 10);\r\n        }\r\n        if (timerToStop) {\r\n            timerToStop = false;\r\n            clearInterval(clockInterval);\r\n        }\r\n\r\n\r\n    }, [])\r\n        /****************************************************\r\n         *      Handlers                                   *\r\n         *                                                  *\r\n         ****************************************************/\r\n\r\n    const handleSelectCorrectAnswer = () => {\r\n        score++;\r\n        setCorrectness(\"✅Correct\\n\");\r\n        previousCorrectPrompts.push(currPrompt);\r\n        setShowQuestionFeedback(true);\r\n    }\r\n    const handleSelectIncorrectAnswer = () => {\r\n        score--;\r\n        setCorrectness(\"⛔️Incorrect\\n\");\r\n        previousIncorrectPrompts.push(currPrompt);\r\n        setShowQuestionFeedback(true);\r\n    }\r\n    \r\n    const handleNextQuestion = () => {\r\n        readyForNewQuestion = true;\r\n        setShowQuestionFeedback(false);\r\n    }\r\n\r\n    const handleNewRound = () => {\r\n        /*let res = await axios.post(\"http://localhost:3001/bestscore\",{\r\n            uid: getCookie('u_id'),\r\n            setid: cardsQuiz[0].belongset\r\n            score: score,\r\n        });*/\r\n        //returns {BestScore: value, NewBestScore: true/false}\r\n        console.log(\"correct: \" + previousCorrectPrompts);\r\n        console.log(\"incorrect: \" + previousIncorrectPrompts); \r\n        previousCorrectPrompts = [];\r\n        previousIncorrectPrompts = [];\r\n        score = 0;\r\n        setShowContinueorExit(false);\r\n    }\r\n\r\n    const handleShowExitQuiz = () => {\r\n        setShowContinueorExit(true);\r\n    }\r\n\r\n    const handleHideExit = () => {\r\n        setShowContinueorExit(false);\r\n    }\r\n\r\n    const handleExitQuiz = () => {\r\n        /*let res = await axios.post(\"http://localhost:3001/bestscore\",{\r\n            uid: getCookie('u_id'),\r\n            setid: cardsQuiz[0].belongset\r\n            score: score,\r\n        });*/\r\n        //returns {BestScore: value, NewBestScore: true/false}\r\n        console.log(\"correct: \" + previousCorrectPrompts);\r\n        console.log(\"incorrect: \" + previousIncorrectPrompts); \r\n        previousCorrectPrompts = [];\r\n        previousIncorrectPrompts = [];\r\n        timerToStop = true;\r\n        score = 0;\r\n        setShowContinueorExit(false);\r\n        timerToStart = true;\r\n        navigate(-1);\r\n\r\n    }\r\n        /****************************************************\r\n         *      Core    Logic                               *\r\n         *                                                  *\r\n         ****************************************************/\r\n\r\n\r\n    var selectedPromptIndex;\r\n    if (readyForNewQuestion) {\r\n        if (mode == \"All prompts once\") {\r\n            selectedPromptIndex = randomCard(previousCorrectPrompts.concat(previousIncorrectPrompts));\r\n            if (selectedPromptIndex < 0 || selectedPromptIndex >= cardsQuiz.length) {\r\n                console.log(\"Out of bounds index\");\r\n                selectedPromptIndex = 0; //avoid crash/err\r\n            }\r\n            //console.log(\"length of exclusion\" + );\r\n            if (previousCorrectPrompts.concat(previousIncorrectPrompts).length >= cardsQuiz.length) {\r\n                setShowContinueorExit(true);\r\n                handleExitQuiz();\r\n            }\r\n        } else {console.log(\"error: Invalid mode\")}\r\n\r\n        var selectedCorrectPosition = randomButtonPlace();\r\n        var selectedIncorrectAnswers = randomIncorrectArray([selectedPromptIndex]); //array size 3, indices, parameter is array because includes expects an array (prevent skip check of first index)\r\n        \r\n        console.log(\"position: \" + selectedCorrectPosition);\r\n        console.log(\"correct answer index:\" + selectedPromptIndex);\r\n        console.log(\"Incorrect: \" + selectedIncorrectAnswers);\r\n        for (var i = 0; i < cardsQuiz.length; i++) {\r\n        //    console.log(cardsQuiz[i].front + cardsQuiz[i].back);\r\n        }\r\n        \r\n\r\n        var answerIndices = []; //empty, used to fill answer options\r\n        //loops through all possible positions of correct\r\n        for (var i = 0; i < 4; i++) {\r\n            if (i == selectedCorrectPosition) {\r\n                answerIndices.push({Index: selectedPromptIndex, Correct:true}); //add when at selected index\r\n            }\r\n            if (i != 3) answerIndices.push({Index: selectedIncorrectAnswers[i], Correct:false}); //add with index of incorrect array, not out of bounds\r\n            \r\n        }\r\n        readyForNewQuestion = false; \r\n        currPrompt = selectedPromptIndex;\r\n        currQuestion = answerIndices;\r\n        console.log(\"Array of options\" + answerIndices);\r\n    \r\n    }\r\n    //const [showSaved, setShowSaved] = useState(false);\r\n    \r\n    \r\n\r\n    /*const reactstopwatch = () => (<ReactStopwatch\r\n        seconds={0}\r\n        minutes={0}\r\n        hours={0}\r\n        render={({hours,minutes,seconds})=>{\r\n            return(\r\n                <h1 style={{textAlign: \"right\", color: \"gold\"}}>{hours}:{minutes}:{seconds}</h1>\r\n            );\r\n        }}>\r\n</ReactStopwatch>);*/\r\n\r\n\r\n    return(\r\n        <div>\r\n            \r\n            <h1 style={{textAlign: \"right\", color: \"gold\"}}> Timer: </h1>\r\n            <h1 style={{textAlign: \"right\", color: \"gold\"}}>  {time/100}sec </h1>\r\n\r\n            <Button onClick={handleShowExitQuiz}> Exit Quiz </Button>\r\n            \r\n\r\n            <h1 style={{textAlign: \"center\", color: \"gold\"}}> Prompt: </h1>\r\n            <br></br>\r\n            <h1 style={{textAlign: \"center\", color: \"gold\"}}> {cardsQuiz[currPrompt].front}</h1>\r\n            <br></br>\r\n            <h1 style={{textAlign: \"center\", color: \"gold\"}}> Answer Choices:</h1>\r\n            <br></br>\r\n            \r\n            {currQuestion.map((item) => { \r\n                if (item.Correct){\r\n                    //Correct answer\r\n                    return(\r\n                        <div style={{textAlign: 'center', justifyContent: 'center'}}>\r\n                            <Button size='lg' onClick={handleSelectCorrectAnswer}> {cardsQuiz[item.Index].back}</Button>\r\n                            <br></br>\r\n                        </div>\r\n                    );\r\n                }\r\n                    //Incorrect answer\r\n                return(\r\n                    <div style={{textAlign: 'center', justifyContent: 'center'}}>\r\n                        <Button size='lg' onClick={handleSelectIncorrectAnswer}> {cardsQuiz[item.Index].back}</Button>\r\n                        <br></br>\r\n                    </div>\r\n                )\r\n            })}\r\n            \r\n                    \r\n            <Modal show={showContinueorExit} onHide={() => handleHideExit}>\r\n                <Modal.Header>\r\n                    <Modal.Title> Exit Quiz? </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                    <h1>{correctness}</h1>       \r\n                    <br></br>\r\n                    <h1>Score: {score}</h1>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleHideExit()}> Continue </Button>\r\n                    <Button onClick={() => handleExitQuiz()}> Exit Quiz </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal show={showQuestionFeedback} onHide={() => handleNextQuestion()}>\r\n                <Modal.Header>\r\n                    <Modal.Title> Question Feedback </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                    <h1>{correctness}</h1>      \r\n                    <br></br> \r\n                    <h1>Score: {score}</h1>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleNextQuestion()}> Next Question </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            \r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\n//check if value is in array\r\nfunction includes(array, value) {\r\n    console.log(\"inclusion check\" + array + \",  \" + value)\r\n    for (var i = 0; i < array.length; i++) {\r\n        if (array[i] == value) return true;\r\n    }\r\n    console.log(\"includes - false\");\r\n    return false;\r\n}\r\n\r\n//randomization functions, return idices @param array to exclude\r\nfunction randomButtonPlace() {\r\n        var index = -1;\r\n        //random number 0-3\r\n        index = Math.random() * 4;\r\n        if (index == 4) index = 3;\r\n        index = Math.floor(index);\r\n        return index;\r\n}\r\n\r\n//returns index of a card within cardsQuiz\r\nfunction randomCard(excludedIndices) {\r\n    if (excludedIndices == null) {\r\n        console.log(\"no exclusion\")\r\n        var index = -1;\r\n        index = Math.random() * cardsQuiz.length;\r\n        if (index == cardsQuiz.length) index = cardsQuiz.length - 1;\r\n        index = Math.floor(index);\r\n        return index;\r\n    }\r\n    var index = -1;\r\n    while (true) {\r\n        //Attempts to get unused indices limitted, used to prevent infinite loops\r\n        console.log(\"exclusion present\")\r\n        var attempts = 100;\r\n        var i = 0;\r\n        for (i=0; i < attempts; i++) {\r\n            index = Math.random() * cardsQuiz.length;\r\n            if (index == cardsQuiz.length) index = cardsQuiz.length - 1;\r\n            index = Math.floor(index);\r\n            if (includes(excludedIndices, index) == false) {\r\n                console.log(\"returning index:\" + index);\r\n                return index;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n\r\n//returns an array of 3 indices\r\n//place array of correct index to exclude it from options\r\n//Purpose: ensure non-duplicate indexed options\r\nfunction randomIncorrectArray(excludedIndices) {\r\n    var incorrectArray = [];\r\n    if (excludedIndices == null) excludedIndices = []; //ensure no null errors\r\n    incorrectArray.push(randomCard(excludedIndices));\r\n    incorrectArray.push(randomCard(incorrectArray.concat(excludedIndices)));\r\n    incorrectArray.push(randomCard(incorrectArray.concat(excludedIndices)));\r\n    return incorrectArray;\r\n}\r\n\r\n\r\n\r\n\r\nexport default QuizGame;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\ImageNote.js",["288","289"],[],"import React, { useState } from \"react\";;\r\n\r\nfunction ImageNote() {\r\n    return (\r\n        \r\n        <div style={{backgroundColor: \"white\", alignContent: 'center',display: 'flex', textAlign: 'center', justifyContent: 'center'}}>\r\n            <img src={JSON.parse(localStorage.getItem('img'))} alt=\"No Image Here Bro\"/>\r\n        </div>\r\n    );\r\n}\r\nexport default ImageNote;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\Search.js",["290","291"],[],"import React, { useState } from \"react\";\r\nimport \"./Search.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Header from \"./Header\";\r\n\r\nfunction Search() {\r\n    const [results, setResults] = useState(JSON.parse(localStorage.getItem('searchResults')));\r\n    const handleClick = () => {\r\n\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div style={{padding: '10rem', paddingLeft: '36rem', paddingRight: '36rem', justifyContent:'flex'}}>\r\n                <div style={{fontSize: '2.5rem',color:\"gold\"}}>\r\n                    Search Results\r\n                </div>\r\n            <div className=\"search-box\">\r\n                ---Flashcard Sets---\r\n                {Object.values(results).map((item, i) => {\r\n                    return (\r\n                        <div style={{color:'gold', fontSize: '1rem'}}>\r\n                            &nbsp; &nbsp;\r\n                            #{i+1} <button variant='warning' className= \"library-buttons\" value={item._id} onClick= {(e) => handleClick(e.target.value)}>\r\n                                {item.setname}\r\n                            </button>\r\n                            &nbsp; &nbsp;\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\TypedQuiz.js",["292","293","294","295","296","297","298","299","300","301","302","303"],[],"import Button from 'react-bootstrap/Button';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { cardsQuiz } from \"./ViewFlashcard\";\r\nimport { useState } from \"react\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport {CloseButton} from 'react';\r\n\r\nimport * as React from 'react';\r\nimport ReactStopwatch from 'react-stopwatch';\r\nimport \"./QuizGame.css\";\r\n\r\n\r\nvar score = 0;\r\nvar previousCorrectPrompts = [];\r\nvar previousIncorrectPrompts = [];\r\n\r\nvar currPrompt = 0;\r\nvar promptNeedSelected = true;\r\n\r\nvar timerToStart = true;\r\nvar timerToStop = false;\r\nvar globalTime = 0;\r\n\r\nfunction TypedQuiz()  {\r\n\r\n    var mode = \"All prompts once\"\r\n    const [correctness, setCorrectness] = useState(\"Correct\");\r\n    const navigate = useNavigate();\r\n    const [showContinueorExit, setShowContinueorExit] = useState(false);\r\n    const [showQuestionFeedback, setShowQuestionFeedback] = useState(false);\r\n    const [answer, setAnswer] = useState(\"\");\r\n    const [time, setTime] = useState(0);\r\n\r\n    React.useEffect(() => {\r\n        var clockInterval;\r\n        if (timerToStart) {\r\n            timerToStart = false;\r\n            clockInterval = setInterval(() => {\r\n                globalTime++;\r\n                setTime(globalTime);\r\n            }, 10);\r\n        }\r\n        if (timerToStop) {\r\n            timerToStop = false;\r\n            clearInterval(clockInterval);\r\n            globalTime = 0\r\n        }\r\n\r\n\r\n    }, [])\r\n    \r\n    \r\n\r\n    /*****************************************************\r\n     *      Handlers                                     *\r\n     *                                                   *\r\n     ****************************************************/\r\n     const handleNextQuestion = () => {\r\n        promptNeedSelected = true;\r\n        setShowQuestionFeedback(false);\r\n    }\r\n\r\n    const handleTypedAnswer = () => {\r\n        console.log(\"Answer: \" + answer + \"Expected: \" + cardsQuiz[currPrompt].back);\r\n\r\n        var correct;\r\n        if (cardsQuiz[currPrompt].back == answer) {\r\n            correct = true;\r\n        } else {\r\n            correct = false;\r\n        }\r\n\r\n        if (correct == true) {\r\n            score++;\r\n            previousCorrectPrompts.push(currPrompt);\r\n            setCorrectness(\"✅Correct\\n\");\r\n\r\n        } else {\r\n            score--;\r\n            previousIncorrectPrompts.push(currPrompt);\r\n            setCorrectness(\"⛔️Incorrect\\n\");\r\n        }\r\n\r\n        setShowQuestionFeedback(true);\r\n    }\r\n\r\n    const handleShowExitQuiz = () => {\r\n        setShowContinueorExit(true);\r\n    }\r\n\r\n    const handleHideExit = () => {\r\n        setShowContinueorExit(false);\r\n    }\r\n\r\n    const handleExitQuiz = () => {\r\n        /*let res = await axios.post(\"http://localhost:3001/bestscore\",{\r\n            uid: getCookie('u_id'),\r\n            setid: cardsQuiz[0].belongset\r\n            score: score,\r\n        });*/\r\n        //returns {BestScore: value, NewBestScore: true/false}\r\n        console.log(\"correct: \" + previousCorrectPrompts);\r\n        console.log(\"incorrect: \" + previousIncorrectPrompts); \r\n        previousCorrectPrompts = [];\r\n        previousIncorrectPrompts = [];\r\n        score = 0;\r\n        globalTime = 0;\r\n        timerToStop = true;\r\n        setShowContinueorExit(false);\r\n        timerToStart = true;\r\n        navigate(-1);\r\n\r\n    }\r\n        /****************************************************\r\n         *      Core    Logic                               *\r\n         *                                                  *\r\n         ****************************************************/\r\n\r\n    if (promptNeedSelected == true) {\r\n\r\n        var selectedPromptIndex = 0;\r\n        \r\n            selectedPromptIndex = randomCard(previousCorrectPrompts.concat(previousIncorrectPrompts));\r\n            if (selectedPromptIndex < 0 || selectedPromptIndex >= cardsQuiz.length) {\r\n                console.log(\"Out of bounds index\");\r\n                selectedPromptIndex = 0; //avoid crash/err\r\n            }\r\n            //console.log(\"length of exclusion\" + );\r\n            if (previousCorrectPrompts.concat(previousIncorrectPrompts).length >= cardsQuiz.length) {\r\n                setShowContinueorExit(true);\r\n                handleExitQuiz();\r\n            }\r\n        \r\n        currPrompt = selectedPromptIndex;\r\n        promptNeedSelected = false; //wait till answer to select new prompt\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Button onClick={handleShowExitQuiz}> Exit Quiz </Button>\r\n\r\n            \r\n            <h1 style={{textAlign: \"right\", color: \"gold\"}}> Timer: </h1>\r\n            <h1 style={{textAlign: \"right\", color: \"gold\"}}>  {time/100}sec </h1>\r\n\r\n            \r\n            <h1 style={{textAlign: \"center\", color: \"gold\"}}> Prompt: </h1>\r\n            <br></br>\r\n            <h1 style={{textAlign: \"center\", color: \"gold\"}}> {cardsQuiz[currPrompt].front}</h1>\r\n            <br></br>\r\n            <h1 style={{textAlign: \"center\", color: \"gold\"}}> Answer:</h1>\r\n            <br></br>\r\n            <textarea type=\"text\" name=\"answer\" onChange={e => setAnswer(e.target.value)}></textarea>\r\n            <Button onClick={handleTypedAnswer}>Submit Answer</Button>\r\n\r\n            <Modal show={showContinueorExit} onHide={() => handleHideExit}>\r\n                <Modal.Header>\r\n                    <Modal.Title> Exit Quiz? </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                    <h1>{correctness}</h1>       \r\n                    <br></br>\r\n                    <h1>Score: {score}</h1>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleHideExit()}> Continue </Button>\r\n                    <Button onClick={() => handleExitQuiz()}> Exit Quiz </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal show={showQuestionFeedback} onHide={() => handleNextQuestion()}>\r\n                <Modal.Header>\r\n                    <Modal.Title> Question Feedback </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body> \r\n                    <h1>{correctness}</h1>      \r\n                    <br></br> \r\n                    <h1>Score: {score}</h1>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={() => handleNextQuestion()}> Next Question </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n//check if value is in array\r\nfunction includes(array, value) {\r\n    //console.log(\"inclusion check\" + array + \",  \" + value)\r\n    for (var i = 0; i < array.length; i++) {\r\n        if (array[i] == value) return true;\r\n    }\r\n    //console.log(\"includes - false\");\r\n    return false;\r\n}\r\n\r\n//returns index of a card within cardsQuiz\r\nfunction randomCard(excludedIndices) {\r\n    if (excludedIndices == null) {\r\n        //console.log(\"no exclusion\")\r\n        var index = -1;\r\n        index = Math.random() * cardsQuiz.length;\r\n        if (index == cardsQuiz.length) index = cardsQuiz.length - 1;\r\n        index = Math.floor(index);\r\n        return index;\r\n    }\r\n    var index = -1;\r\n    while (true) {\r\n        //Attempts to get unused indices limitted, used to prevent infinite loops\r\n        //console.log(\"exclusion present\")\r\n        var attempts = 100;\r\n        var i = 0;\r\n        for (i=0; i < attempts; i++) {\r\n            index = Math.random() * cardsQuiz.length;\r\n            if (index == cardsQuiz.length) index = cardsQuiz.length - 1;\r\n            index = Math.floor(index);\r\n            if (includes(excludedIndices, index) == false) {\r\n                console.log(\"returning index:\" + index);\r\n                return index;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n//returns an array of 3 indices\r\n//place array of correct index to exclude it from options\r\n//Purpose: ensure non-duplicate indexed options\r\nfunction randomIncorrectArray(excludedIndices) {\r\n    var incorrectArray = [];\r\n    if (excludedIndices == null) excludedIndices = []; //ensure no null errors\r\n    incorrectArray.push(randomCard(excludedIndices));\r\n    incorrectArray.push(randomCard(incorrectArray.concat(excludedIndices)));\r\n    incorrectArray.push(randomCard(incorrectArray.concat(excludedIndices)));\r\n    return incorrectArray;\r\n}\r\n\r\nexport default TypedQuiz;","C:\\Users\\bxjia\\sprint2\\BoilerCards\\client\\src\\Components\\QuizSelect.js",["304"],[],"import Button from \"react-bootstrap/esm/Button\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction QuizSelect() {\r\n\r\n    const [showSelection, setShowSelection] = useState(true);\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const handleTypeQuiz = () => {\r\n\r\n        navigate(\"/typedquiz\");\r\n    }\r\n\r\n    const handleChoiceQuiz = () => {\r\n\r\n\r\n        navigate(\"/quizgame\");\r\n    }\r\n\r\n    const handleReturnToSet = () => {\r\n\r\n        navigate(-1);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Button  onClick={handleReturnToSet}>\r\n                Back to set\r\n            </Button>\r\n            <br></br>\r\n            <p>Select quiz type</p>\r\n            <br></br>\r\n            <Button show={showSelection} onClick={handleTypeQuiz}>\r\n                Type Answer\r\n            </Button>\r\n            <Button show={showSelection} onClick={handleChoiceQuiz}>\r\n                Select Answer\r\n            </Button>\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nexport default QuizSelect;",{"ruleId":"305","severity":1,"message":"306","line":5,"column":8,"nodeType":"307","messageId":"308","endLine":5,"endColumn":24},{"ruleId":"305","severity":1,"message":"309","line":6,"column":8,"nodeType":"307","messageId":"308","endLine":6,"endColumn":17},{"ruleId":"305","severity":1,"message":"310","line":3,"column":17,"nodeType":"307","messageId":"308","endLine":3,"endColumn":25},{"ruleId":"305","severity":1,"message":"311","line":6,"column":8,"nodeType":"307","messageId":"308","endLine":6,"endColumn":14},{"ruleId":"305","severity":1,"message":"312","line":11,"column":8,"nodeType":"307","messageId":"308","endLine":11,"endColumn":20},{"ruleId":"305","severity":1,"message":"313","line":19,"column":10,"nodeType":"307","messageId":"308","endLine":19,"endColumn":20},{"ruleId":"305","severity":1,"message":"314","line":10,"column":7,"nodeType":"307","messageId":"308","endLine":10,"endColumn":13},{"ruleId":"305","severity":1,"message":"315","line":34,"column":12,"nodeType":"307","messageId":"308","endLine":34,"endColumn":25},{"ruleId":"305","severity":1,"message":"316","line":34,"column":27,"nodeType":"307","messageId":"308","endLine":34,"endColumn":43},{"ruleId":"305","severity":1,"message":"317","line":35,"column":12,"nodeType":"307","messageId":"308","endLine":35,"endColumn":23},{"ruleId":"305","severity":1,"message":"318","line":35,"column":25,"nodeType":"307","messageId":"308","endLine":35,"endColumn":39},{"ruleId":"305","severity":1,"message":"319","line":42,"column":11,"nodeType":"307","messageId":"308","endLine":42,"endColumn":23},{"ruleId":"305","severity":1,"message":"320","line":9,"column":11,"nodeType":"307","messageId":"308","endLine":9,"endColumn":20},{"ruleId":"321","severity":1,"message":"322","line":16,"column":3,"nodeType":"323","endLine":16,"endColumn":43},{"ruleId":"305","severity":1,"message":"310","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":25},{"ruleId":"305","severity":1,"message":"324","line":4,"column":8,"nodeType":"307","messageId":"308","endLine":4,"endColumn":12},{"ruleId":"305","severity":1,"message":"325","line":13,"column":12,"nodeType":"307","messageId":"308","endLine":13,"endColumn":19},{"ruleId":"305","severity":1,"message":"310","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":25},{"ruleId":"305","severity":1,"message":"326","line":5,"column":8,"nodeType":"307","messageId":"308","endLine":5,"endColumn":14},{"ruleId":"305","severity":1,"message":"327","line":7,"column":8,"nodeType":"307","messageId":"308","endLine":7,"endColumn":19},{"ruleId":"305","severity":1,"message":"328","line":8,"column":10,"nodeType":"307","messageId":"308","endLine":8,"endColumn":26},{"ruleId":"305","severity":1,"message":"329","line":14,"column":8,"nodeType":"307","messageId":"308","endLine":14,"endColumn":14},{"ruleId":"305","severity":1,"message":"314","line":16,"column":7,"nodeType":"307","messageId":"308","endLine":16,"endColumn":13},{"ruleId":"305","severity":1,"message":"315","line":23,"column":12,"nodeType":"307","messageId":"308","endLine":23,"endColumn":25},{"ruleId":"305","severity":1,"message":"316","line":23,"column":27,"nodeType":"307","messageId":"308","endLine":23,"endColumn":43},{"ruleId":"305","severity":1,"message":"317","line":24,"column":12,"nodeType":"307","messageId":"308","endLine":24,"endColumn":23},{"ruleId":"305","severity":1,"message":"318","line":24,"column":25,"nodeType":"307","messageId":"308","endLine":24,"endColumn":39},{"ruleId":"305","severity":1,"message":"330","line":26,"column":12,"nodeType":"307","messageId":"308","endLine":26,"endColumn":18},{"ruleId":"305","severity":1,"message":"331","line":33,"column":12,"nodeType":"307","messageId":"308","endLine":33,"endColumn":21},{"ruleId":"332","severity":1,"message":"333","line":41,"column":7,"nodeType":"334","endLine":41,"endColumn":9,"suggestions":"335"},{"ruleId":"305","severity":1,"message":"336","line":52,"column":13,"nodeType":"307","messageId":"308","endLine":52,"endColumn":16},{"ruleId":"305","severity":1,"message":"336","line":60,"column":13,"nodeType":"307","messageId":"308","endLine":60,"endColumn":16},{"ruleId":"305","severity":1,"message":"337","line":6,"column":10,"nodeType":"307","messageId":"308","endLine":6,"endColumn":20},{"ruleId":"305","severity":1,"message":"338","line":30,"column":20,"nodeType":"307","messageId":"308","endLine":30,"endColumn":29},{"ruleId":"305","severity":1,"message":"339","line":57,"column":13,"nodeType":"307","messageId":"308","endLine":57,"endColumn":18},{"ruleId":"340","severity":1,"message":"341","line":59,"column":63,"nodeType":"342","messageId":"343","endLine":59,"endColumn":65},{"ruleId":"305","severity":1,"message":"336","line":81,"column":13,"nodeType":"307","messageId":"308","endLine":81,"endColumn":16},{"ruleId":"344","severity":1,"message":"345","line":94,"column":22,"nodeType":"346","messageId":"347","endLine":94,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":133,"column":22,"nodeType":"346","messageId":"347","endLine":133,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":173,"column":22,"nodeType":"346","messageId":"347","endLine":173,"endColumn":24},{"ruleId":"321","severity":1,"message":"322","line":482,"column":25,"nodeType":"323","endLine":482,"endColumn":65},{"ruleId":"305","severity":1,"message":"329","line":13,"column":8,"nodeType":"307","messageId":"308","endLine":13,"endColumn":14},{"ruleId":"305","severity":1,"message":"313","line":14,"column":9,"nodeType":"307","messageId":"308","endLine":14,"endColumn":19},{"ruleId":"305","severity":1,"message":"348","line":16,"column":8,"nodeType":"307","messageId":"308","endLine":16,"endColumn":16},{"ruleId":"305","severity":1,"message":"349","line":17,"column":8,"nodeType":"307","messageId":"308","endLine":17,"endColumn":22},{"ruleId":"305","severity":1,"message":"350","line":18,"column":8,"nodeType":"307","messageId":"308","endLine":18,"endColumn":20},{"ruleId":"305","severity":1,"message":"351","line":19,"column":8,"nodeType":"307","messageId":"308","endLine":19,"endColumn":25},{"ruleId":"305","severity":1,"message":"352","line":20,"column":9,"nodeType":"307","messageId":"308","endLine":20,"endColumn":15},{"ruleId":"305","severity":1,"message":"353","line":23,"column":9,"nodeType":"307","messageId":"308","endLine":23,"endColumn":19},{"ruleId":"305","severity":1,"message":"354","line":37,"column":11,"nodeType":"307","messageId":"308","endLine":37,"endColumn":18},{"ruleId":"355","severity":1,"message":"356","line":68,"column":5,"nodeType":"357","messageId":"358","endLine":68,"endColumn":27},{"ruleId":"305","severity":1,"message":"359","line":82,"column":28,"nodeType":"307","messageId":"308","endLine":82,"endColumn":32},{"ruleId":"344","severity":1,"message":"345","line":140,"column":22,"nodeType":"346","messageId":"347","endLine":140,"endColumn":24},{"ruleId":"305","severity":1,"message":"360","line":151,"column":11,"nodeType":"307","messageId":"308","endLine":151,"endColumn":23},{"ruleId":"361","severity":1,"message":"362","line":298,"column":45,"nodeType":"323","endLine":298,"endColumn":49},{"ruleId":"361","severity":1,"message":"362","line":301,"column":45,"nodeType":"323","endLine":301,"endColumn":49},{"ruleId":"321","severity":1,"message":"322","line":388,"column":25,"nodeType":"323","endLine":388,"endColumn":65},{"ruleId":"305","severity":1,"message":"330","line":12,"column":12,"nodeType":"307","messageId":"308","endLine":12,"endColumn":18},{"ruleId":"305","severity":1,"message":"363","line":12,"column":20,"nodeType":"307","messageId":"308","endLine":12,"endColumn":29},{"ruleId":"305","severity":1,"message":"364","line":12,"column":31,"nodeType":"307","messageId":"308","endLine":12,"endColumn":43},{"ruleId":"305","severity":1,"message":"336","line":26,"column":17,"nodeType":"307","messageId":"308","endLine":26,"endColumn":20},{"ruleId":"305","severity":1,"message":"365","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":23},{"ruleId":"321","severity":1,"message":"322","line":106,"column":25,"nodeType":"323","endLine":106,"endColumn":65},{"ruleId":"305","severity":1,"message":"366","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":26},{"ruleId":"305","severity":1,"message":"353","line":7,"column":10,"nodeType":"307","messageId":"308","endLine":7,"endColumn":20},{"ruleId":"305","severity":1,"message":"329","line":10,"column":8,"nodeType":"307","messageId":"308","endLine":10,"endColumn":14},{"ruleId":"305","severity":1,"message":"367","line":15,"column":21,"nodeType":"307","messageId":"308","endLine":15,"endColumn":31},{"ruleId":"305","severity":1,"message":"330","line":16,"column":12,"nodeType":"307","messageId":"308","endLine":16,"endColumn":18},{"ruleId":"305","severity":1,"message":"364","line":16,"column":31,"nodeType":"307","messageId":"308","endLine":16,"endColumn":43},{"ruleId":"305","severity":1,"message":"368","line":18,"column":11,"nodeType":"307","messageId":"308","endLine":18,"endColumn":24},{"ruleId":"305","severity":1,"message":"366","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":26},{"ruleId":"305","severity":1,"message":"369","line":5,"column":10,"nodeType":"307","messageId":"308","endLine":5,"endColumn":42},{"ruleId":"305","severity":1,"message":"370","line":10,"column":8,"nodeType":"307","messageId":"308","endLine":10,"endColumn":19},{"ruleId":"305","severity":1,"message":"350","line":11,"column":8,"nodeType":"307","messageId":"308","endLine":11,"endColumn":20},{"ruleId":"305","severity":1,"message":"351","line":12,"column":8,"nodeType":"307","messageId":"308","endLine":12,"endColumn":25},{"ruleId":"305","severity":1,"message":"329","line":16,"column":8,"nodeType":"307","messageId":"308","endLine":16,"endColumn":14},{"ruleId":"305","severity":1,"message":"371","line":26,"column":5,"nodeType":"307","messageId":"308","endLine":26,"endColumn":16},{"ruleId":"305","severity":1,"message":"330","line":36,"column":12,"nodeType":"307","messageId":"308","endLine":36,"endColumn":18},{"ruleId":"305","severity":1,"message":"363","line":36,"column":20,"nodeType":"307","messageId":"308","endLine":36,"endColumn":29},{"ruleId":"305","severity":1,"message":"367","line":40,"column":21,"nodeType":"307","messageId":"308","endLine":40,"endColumn":31},{"ruleId":"305","severity":1,"message":"372","line":64,"column":12,"nodeType":"307","messageId":"308","endLine":64,"endColumn":24},{"ruleId":"305","severity":1,"message":"373","line":64,"column":26,"nodeType":"307","messageId":"308","endLine":64,"endColumn":41},{"ruleId":"305","severity":1,"message":"336","line":82,"column":13,"nodeType":"307","messageId":"308","endLine":82,"endColumn":16},{"ruleId":"344","severity":1,"message":"345","line":155,"column":22,"nodeType":"346","messageId":"347","endLine":155,"endColumn":24},{"ruleId":"355","severity":1,"message":"356","line":163,"column":5,"nodeType":"357","messageId":"358","endLine":163,"endColumn":49},{"ruleId":"344","severity":1,"message":"345","line":169,"column":22,"nodeType":"346","messageId":"347","endLine":169,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":191,"column":22,"nodeType":"346","messageId":"347","endLine":191,"endColumn":24},{"ruleId":"355","severity":1,"message":"356","line":198,"column":5,"nodeType":"357","messageId":"358","endLine":198,"endColumn":36},{"ruleId":"355","severity":1,"message":"356","line":213,"column":5,"nodeType":"357","messageId":"358","endLine":213,"endColumn":44},{"ruleId":"355","severity":1,"message":"356","line":274,"column":5,"nodeType":"357","messageId":"358","endLine":274,"endColumn":44},{"ruleId":"355","severity":1,"message":"356","line":298,"column":5,"nodeType":"357","messageId":"358","endLine":298,"endColumn":27},{"ruleId":"344","severity":1,"message":"345","line":308,"column":26,"nodeType":"346","messageId":"347","endLine":308,"endColumn":28},{"ruleId":"344","severity":1,"message":"345","line":323,"column":22,"nodeType":"346","messageId":"347","endLine":323,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":337,"column":22,"nodeType":"346","messageId":"347","endLine":337,"endColumn":24},{"ruleId":"355","severity":1,"message":"356","line":343,"column":5,"nodeType":"357","messageId":"358","endLine":343,"endColumn":27},{"ruleId":"361","severity":1,"message":"362","line":458,"column":45,"nodeType":"323","endLine":458,"endColumn":49},{"ruleId":"361","severity":1,"message":"362","line":461,"column":45,"nodeType":"323","endLine":461,"endColumn":49},{"ruleId":"321","severity":1,"message":"322","line":622,"column":25,"nodeType":"323","endLine":622,"endColumn":65},{"ruleId":"305","severity":1,"message":"310","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":10,"column":56,"nodeType":"323","endLine":10,"endColumn":150},{"ruleId":"305","severity":1,"message":"310","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":25},{"ruleId":"305","severity":1,"message":"329","line":8,"column":8,"nodeType":"307","messageId":"308","endLine":8,"endColumn":14},{"ruleId":"305","severity":1,"message":"330","line":12,"column":12,"nodeType":"307","messageId":"308","endLine":12,"endColumn":18},{"ruleId":"305","severity":1,"message":"364","line":12,"column":31,"nodeType":"307","messageId":"308","endLine":12,"endColumn":43},{"ruleId":"355","severity":1,"message":"356","line":44,"column":5,"nodeType":"357","messageId":"358","endLine":46,"endColumn":11},{"ruleId":"376","severity":1,"message":"377","line":14,"column":20,"nodeType":"378","messageId":"379","endLine":14,"endColumn":31},{"ruleId":"305","severity":1,"message":"380","line":44,"column":8,"nodeType":"307","messageId":"308","endLine":44,"endColumn":31},{"ruleId":"305","severity":1,"message":"381","line":45,"column":8,"nodeType":"307","messageId":"308","endLine":45,"endColumn":37},{"ruleId":"305","severity":1,"message":"382","line":46,"column":8,"nodeType":"307","messageId":"308","endLine":46,"endColumn":34},{"ruleId":"305","severity":1,"message":"383","line":48,"column":7,"nodeType":"307","messageId":"308","endLine":48,"endColumn":32},{"ruleId":"305","severity":1,"message":"384","line":49,"column":7,"nodeType":"307","messageId":"308","endLine":49,"endColumn":27},{"ruleId":"305","severity":1,"message":"385","line":50,"column":7,"nodeType":"307","messageId":"308","endLine":50,"endColumn":36},{"ruleId":"305","severity":1,"message":"386","line":51,"column":7,"nodeType":"307","messageId":"308","endLine":51,"endColumn":42},{"ruleId":"305","severity":1,"message":"387","line":52,"column":7,"nodeType":"307","messageId":"308","endLine":52,"endColumn":29},{"ruleId":"305","severity":1,"message":"388","line":53,"column":7,"nodeType":"307","messageId":"308","endLine":53,"endColumn":39},{"ruleId":"344","severity":1,"message":"345","line":148,"column":21,"nodeType":"346","messageId":"347","endLine":148,"endColumn":23},{"ruleId":"344","severity":1,"message":"345","line":157,"column":27,"nodeType":"346","messageId":"347","endLine":157,"endColumn":29},{"ruleId":"305","severity":1,"message":"389","line":158,"column":15,"nodeType":"307","messageId":"308","endLine":158,"endColumn":17},{"ruleId":"305","severity":1,"message":"326","line":3,"column":8,"nodeType":"307","messageId":"308","endLine":3,"endColumn":14},{"ruleId":"305","severity":1,"message":"390","line":5,"column":24,"nodeType":"307","messageId":"308","endLine":5,"endColumn":37},{"ruleId":"305","severity":1,"message":"391","line":6,"column":9,"nodeType":"307","messageId":"308","endLine":6,"endColumn":20},{"ruleId":"305","severity":1,"message":"392","line":9,"column":8,"nodeType":"307","messageId":"308","endLine":9,"endColumn":22},{"ruleId":"305","severity":1,"message":"393","line":12,"column":5,"nodeType":"307","messageId":"308","endLine":12,"endColumn":19},{"ruleId":"305","severity":1,"message":"394","line":80,"column":11,"nodeType":"307","messageId":"308","endLine":80,"endColumn":25},{"ruleId":"344","severity":1,"message":"345","line":129,"column":18,"nodeType":"346","messageId":"347","endLine":129,"endColumn":20},{"ruleId":"395","severity":1,"message":"396","line":155,"column":18,"nodeType":"307","messageId":"397","endLine":155,"endColumn":19},{"ruleId":"344","severity":1,"message":"345","line":156,"column":19,"nodeType":"346","messageId":"347","endLine":156,"endColumn":21},{"ruleId":"344","severity":1,"message":"398","line":159,"column":19,"nodeType":"346","messageId":"347","endLine":159,"endColumn":21},{"ruleId":"344","severity":1,"message":"345","line":259,"column":22,"nodeType":"346","messageId":"347","endLine":259,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":270,"column":19,"nodeType":"346","messageId":"347","endLine":270,"endColumn":21},{"ruleId":"344","severity":1,"message":"345","line":281,"column":19,"nodeType":"346","messageId":"347","endLine":281,"endColumn":21},{"ruleId":"395","severity":1,"message":"399","line":285,"column":9,"nodeType":"307","messageId":"397","endLine":285,"endColumn":14},{"ruleId":"344","severity":1,"message":"345","line":293,"column":23,"nodeType":"346","messageId":"347","endLine":293,"endColumn":25},{"ruleId":"344","severity":1,"message":"345","line":295,"column":50,"nodeType":"346","messageId":"347","endLine":295,"endColumn":52},{"ruleId":"305","severity":1,"message":"310","line":1,"column":17,"nodeType":"307","messageId":"308","endLine":1,"endColumn":25},{"ruleId":"374","severity":1,"message":"375","line":7,"column":13,"nodeType":"323","endLine":7,"endColumn":89},{"ruleId":"305","severity":1,"message":"326","line":3,"column":8,"nodeType":"307","messageId":"308","endLine":3,"endColumn":14},{"ruleId":"305","severity":1,"message":"400","line":7,"column":21,"nodeType":"307","messageId":"308","endLine":7,"endColumn":31},{"ruleId":"305","severity":1,"message":"391","line":6,"column":9,"nodeType":"307","messageId":"308","endLine":6,"endColumn":20},{"ruleId":"305","severity":1,"message":"392","line":9,"column":8,"nodeType":"307","messageId":"308","endLine":9,"endColumn":22},{"ruleId":"305","severity":1,"message":"401","line":26,"column":9,"nodeType":"307","messageId":"308","endLine":26,"endColumn":13},{"ruleId":"344","severity":1,"message":"345","line":67,"column":40,"nodeType":"346","messageId":"347","endLine":67,"endColumn":42},{"ruleId":"344","severity":1,"message":"345","line":73,"column":21,"nodeType":"346","messageId":"347","endLine":73,"endColumn":23},{"ruleId":"344","severity":1,"message":"345","line":119,"column":28,"nodeType":"346","messageId":"347","endLine":119,"endColumn":30},{"ruleId":"344","severity":1,"message":"345","line":197,"column":22,"nodeType":"346","messageId":"347","endLine":197,"endColumn":24},{"ruleId":"344","severity":1,"message":"345","line":209,"column":19,"nodeType":"346","messageId":"347","endLine":209,"endColumn":21},{"ruleId":"395","severity":1,"message":"399","line":213,"column":9,"nodeType":"307","messageId":"397","endLine":213,"endColumn":14},{"ruleId":"344","severity":1,"message":"345","line":221,"column":23,"nodeType":"346","messageId":"347","endLine":221,"endColumn":25},{"ruleId":"344","severity":1,"message":"345","line":223,"column":50,"nodeType":"346","messageId":"347","endLine":223,"endColumn":52},{"ruleId":"305","severity":1,"message":"402","line":235,"column":10,"nodeType":"307","messageId":"308","endLine":235,"endColumn":30},{"ruleId":"305","severity":1,"message":"403","line":7,"column":27,"nodeType":"307","messageId":"308","endLine":7,"endColumn":43},"no-unused-vars","'RegistrationPage' is defined but never used.","Identifier","unusedVar","'SavedIcon' is defined but never used.","'useState' is defined but never used.","'Header' is defined but never used.","'CreateFolder' is defined but never used.","'useCookies' is defined but never used.","'errors' is assigned a value but never used.","'errorMessages' is assigned a value but never used.","'setErrorMessages' is assigned a value but never used.","'isSubmitted' is assigned a value but never used.","'setIsSubmitted' is assigned a value but never used.","'handleSignUp' is assigned a value but never used.","'closeIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Form' is defined but never used.","'cookies' is assigned a value but never used.","'Button' is defined but never used.","'Deletepopup' is defined but never used.","'handleShowDelete' is defined but never used.","'cookie' is defined but never used.","'cookie' is assigned a value but never used.","'resetCode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["404"],"'res' is assigned a value but never used.","'flashcards' is defined but never used.","'setUpdate' is assigned a value but never used.","'ready' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'ToggleButton' is defined but never used.","'ToggleButtonGroup' is defined but never used.","'folder' is defined but never used.","'libstorage' is defined but never used.","'fileRef' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'rate' is assigned a value but never used.","'onFileChange' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'setCookie' is assigned a value but never used.","'removeCookie' is assigned a value but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'setLibrary' is assigned a value but never used.","'handleSeeMore' is assigned a value but never used.","'UNSAFE_enhanceManualRouteObjects' is defined but never used.","'ButtonGroup' is defined but never used.","'currentUser' is assigned a value but never used.","'checkedState' is assigned a value but never used.","'setCheckedState' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'showFolderDeleteConfirm' is assigned a value but never used.","'showFlashcardsetDeleteConfirm' is assigned a value but never used.","'showFlashcardDeleteConfirm' is assigned a value but never used.","'handleCloseFlashsetDelCon' is assigned a value but never used.","'handleCloseFolDelCon' is assigned a value but never used.","'handleShowFolderDeleteConfirm' is assigned a value but never used.","'handleShowFlashcardsetDeleteConfirm' is assigned a value but never used.","'handleCloseFlashDelCon' is assigned a value but never used.","'handleShowFlashcardDeleteConfirm' is assigned a value but never used.","'id' is assigned a value but never used.","'setFlashcards' is assigned a value but never used.","'CloseButton' is defined but never used.","'ReactStopwatch' is defined but never used.","'flashcardarray' is defined but never used.","'handleNewRound' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","Expected '!==' and instead saw '!='.","'index' is already defined.","'setResults' is assigned a value but never used.","'mode' is assigned a value but never used.","'randomIncorrectArray' is defined but never used.","'setShowSelection' is assigned a value but never used.",{"desc":"405","fix":"406"},"Update the dependencies array to be: [navigate]",{"range":"407","text":"408"},[1564,1566],"[navigate]"]